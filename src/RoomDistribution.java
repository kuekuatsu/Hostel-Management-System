
import java.awt.Color;
import java.awt.Component;
import java.awt.GraphicsEnvironment;
import java.awt.Image;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Statement;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.YearMonth;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.border.Border;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Ridisha Shetty
 */
public class RoomDistribution extends javax.swing.JFrame {

    /**
     * Creates new form RoomDistribution
     */
    
    public RoomDistribution() {
        initComponents();
        Point center = GraphicsEnvironment.getLocalGraphicsEnvironment().getCenterPoint();
        int windowWidth = this.getWidth();
        int windowHeight = this.getHeight();
        this.setBounds(center.x - windowWidth / 2, center.y - windowHeight / 2, windowWidth,
            windowHeight);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setVisible(true);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPasswordField1 = new javax.swing.JPasswordField();
        pagePanel = new javax.swing.JPanel();
        dashboard = new javax.swing.JLabel();
        room = new javax.swing.JLabel();
        routine = new javax.swing.JLabel();
        rent = new javax.swing.JLabel();
        kitchen = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        dd2Field = new javax.swing.JTextField();
        roomField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        payableField = new javax.swing.JTextField();
        noneBtn = new javax.swing.JRadioButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        emField = new javax.swing.JTextField();
        mm1Field = new javax.swing.JTextField();
        vegBtn = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        yy1Field = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        delete = new javax.swing.JButton();
        mobileField = new javax.swing.JTextField();
        add = new javax.swing.JButton();
        yy2Field = new javax.swing.JTextField();
        clear = new javax.swing.JButton();
        change = new javax.swing.JLabel();
        mm2Field = new javax.swing.JTextField();
        search = new javax.swing.JButton();
        dd1Field = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        mailField = new javax.swing.JTextField();
        nonvegBtn = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        update = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        adrField = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        choiceOpt = new javax.swing.JComboBox();
        jLabel16 = new javax.swing.JLabel();
        depField = new javax.swing.JTextField();
        bill = new javax.swing.JLabel();
        reports = new javax.swing.JLabel();
        profile = new javax.swing.JLabel();
        fee = new javax.swing.JLabel();
        staff = new javax.swing.JLabel();

        jPasswordField1.setText("jPasswordField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DISTRIBUTION OF ROOMS");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                formWindowLostFocus(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowDeactivated(java.awt.event.WindowEvent evt) {
                formWindowDeactivated(evt);
            }
        });

        pagePanel.setBackground(new java.awt.Color(238, 255, 237));

        dashboard.setFont(new java.awt.Font("Yu Gothic", 0, 12)); // NOI18N
        dashboard.setForeground(new java.awt.Color(0, 51, 255));
        dashboard.setText("Dashboard");
        dashboard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dashboardMouseClicked(evt);
            }
        });

        room.setFont(new java.awt.Font("Yu Gothic", 1, 12)); // NOI18N
        room.setText("Room Distribution");

        routine.setFont(new java.awt.Font("Yu Gothic", 0, 12)); // NOI18N
        routine.setForeground(new java.awt.Color(0, 51, 255));
        routine.setText("Routine Check");
        routine.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                routineMouseClicked(evt);
            }
        });

        rent.setFont(new java.awt.Font("Yu Gothic", 0, 12)); // NOI18N
        rent.setForeground(new java.awt.Color(0, 51, 255));
        rent.setText("Rent Payment");
        rent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rentMouseClicked(evt);
            }
        });

        kitchen.setFont(new java.awt.Font("Yu Gothic", 0, 12)); // NOI18N
        kitchen.setForeground(new java.awt.Color(0, 51, 255));
        kitchen.setText("Kitchen Materials");
        kitchen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                kitchenMouseClicked(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 102, 0), null, null, new java.awt.Color(0, 102, 0)));

        jLabel5.setText("Room:");

        dd2Field.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        dd2Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dd2FieldActionPerformed(evt);
            }
        });

        roomField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        roomField.setToolTipText("");
        roomField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                roomFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                roomFieldFocusLost(evt);
            }
        });
        roomField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomFieldActionPerformed(evt);
            }
        });
        roomField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                roomFieldKeyReleased(evt);
            }
        });

        jLabel2.setText("Name:");

        payableField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        payableField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payableFieldActionPerformed(evt);
            }
        });

        noneBtn.setBackground(new java.awt.Color(255, 255, 255));
        noneBtn.setText("Opt out");
        noneBtn.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                noneBtnStateChanged(evt);
            }
        });
        noneBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                noneBtnMouseClicked(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel12.setText("/");

        jLabel4.setText("Join Date:");

        emField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        mm1Field.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        vegBtn.setBackground(new java.awt.Color(255, 255, 255));
        vegBtn.setText("Vegetarian");
        vegBtn.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                vegBtnStateChanged(evt);
            }
        });
        vegBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vegBtnMouseClicked(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("/");

        nameField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        nameField.setToolTipText("First");
        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });

        jLabel13.setText("Food Service:");

        jLabel6.setText("Mobile Number:");

        yy1Field.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        yy1Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yy1FieldActionPerformed(evt);
            }
        });

        jLabel9.setText("Emergency Contact:");

        delete.setBackground(new java.awt.Color(255, 255, 255));
        delete.setForeground(new java.awt.Color(0, 102, 0));
        delete.setText("Delete");
        delete.setToolTipText("");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        mobileField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        add.setBackground(new java.awt.Color(255, 255, 255));
        add.setForeground(new java.awt.Color(0, 102, 0));
        add.setText("Add Record");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        yy2Field.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        clear.setBackground(new java.awt.Color(255, 255, 255));
        clear.setForeground(new java.awt.Color(0, 102, 0));
        clear.setText("Clear");
        clear.setActionCommand("");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        change.setText("Rent per Month:");

        mm2Field.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        mm2Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mm2FieldActionPerformed(evt);
            }
        });

        search.setBackground(new java.awt.Color(255, 255, 255));
        search.setForeground(new java.awt.Color(0, 102, 0));
        search.setText("Search");
        search.setActionCommand("");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        dd1Field.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        dd1Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dd1FieldActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("/");

        mailField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        nonvegBtn.setBackground(new java.awt.Color(255, 255, 255));
        nonvegBtn.setText("Non-Vegetarian");
        nonvegBtn.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                nonvegBtnStateChanged(evt);
            }
        });
        nonvegBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nonvegBtnMouseClicked(evt);
            }
        });

        jLabel3.setText("Birth Date:");

        jLabel8.setText("E-mail ID:");

        jLabel10.setText("Home Address:");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel11.setText("/");

        update.setBackground(new java.awt.Color(255, 255, 255));
        update.setForeground(new java.awt.Color(0, 102, 0));
        update.setText("Update");
        update.setActionCommand("");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        adrField.setColumns(20);
        adrField.setRows(5);
        jScrollPane1.setViewportView(adrField);

        jPanel2.setBackground(new java.awt.Color(0, 102, 0));

        jLabel15.setFont(new java.awt.Font("Yu Gothic Light", 1, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("ROOM DISTRIBUTION");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel15)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(jLabel15)
                .addContainerGap())
        );

        jLabel14.setText("Type:");

        choiceOpt.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "Standard-4", "Standard-3", "Premium-2", "Premium-1" }));
        choiceOpt.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                choiceOptItemStateChanged(evt);
            }
        });

        jLabel16.setText("*Deposit:");

        depField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        depField.setEnabled(false);
        depField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(add)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(delete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(update)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(search))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel8)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(mobileField, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                            .addComponent(emField)
                            .addComponent(mailField)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(24, 24, 24))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel5))
                                .addGap(42, 42, 42)))
                        .addGap(46, 46, 46)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(dd2Field, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel7)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(mm2Field, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel11)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(yy2Field, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(mm1Field, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel12)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(yy1Field, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(roomField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(jLabel14)
                                .addGap(18, 18, 18)
                                .addComponent(choiceOpt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(73, 73, 73)
                        .addComponent(dd1Field, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(43, 43, 43)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel16)
                            .addComponent(change))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(vegBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(nonvegBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(noneBtn))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(depField, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(payableField, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel14)
                    .addComponent(choiceOpt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dd1Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mm1Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yy1Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dd2Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mm2Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(yy2Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(mobileField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(mailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(emField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vegBtn)
                    .addComponent(nonvegBtn)
                    .addComponent(noneBtn)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(depField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(change)
                    .addComponent(payableField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(add)
                    .addComponent(clear)
                    .addComponent(delete)
                    .addComponent(update)
                    .addComponent(search))
                .addGap(8, 8, 8))
        );

        bill.setFont(new java.awt.Font("Yu Gothic", 0, 12)); // NOI18N
        bill.setForeground(new java.awt.Color(0, 51, 255));
        bill.setText("Pay Bill");
        bill.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                billMouseClicked(evt);
            }
        });

        reports.setFont(new java.awt.Font("Yu Gothic", 0, 12)); // NOI18N
        reports.setForeground(new java.awt.Color(0, 51, 255));
        reports.setText("Add Reports");
        reports.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reportsMouseClicked(evt);
            }
        });

        profile.setPreferredSize(new java.awt.Dimension(34, 14));
        profile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                profileMouseClicked(evt);
            }
        });

        fee.setFont(new java.awt.Font("Yu Gothic", 0, 12)); // NOI18N
        fee.setForeground(new java.awt.Color(0, 51, 255));
        fee.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        fee.setText("Fee Details");
        fee.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                feeMouseClicked(evt);
            }
        });

        staff.setFont(new java.awt.Font("Yu Gothic", 0, 12)); // NOI18N
        staff.setForeground(new java.awt.Color(0, 51, 255));
        staff.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        staff.setText("Staff Manage");
        staff.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                staffMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pagePanelLayout = new javax.swing.GroupLayout(pagePanel);
        pagePanel.setLayout(pagePanelLayout);
        pagePanelLayout.setHorizontalGroup(
            pagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pagePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(profile, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dashboard)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(routine)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(room)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rent)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(kitchen)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bill)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(reports)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fee)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(staff)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pagePanelLayout.setVerticalGroup(
            pagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(dashboard)
                        .addComponent(routine)
                        .addComponent(room)
                        .addComponent(rent)
                        .addComponent(kitchen, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(bill)
                        .addComponent(reports)
                        .addComponent(fee)
                        .addComponent(staff))
                    .addComponent(profile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    String fullName="", mobile="", email="", emergency="", address="", food="";
    int rentPay;
    Date birth, joined;
    Border alert = BorderFactory.createLineBorder(Color.getHSBColor(120, 100, 0));
    String url = "jdbc:sqlserver://192.168.0.98:1433;databaseName=hostel;integratedSecurity=true";
    
    LocalDate ldBirth, ldJoin, uBirth, uJoin;
    
    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        // ADD RECORD:
        String name=String.valueOf(nameField.getText());
        
        if((!roomField.getText().isEmpty() || roomField.getText().equals("")) && !nameField.getText().isEmpty() && !dd1Field.getText().isEmpty() && !mm1Field.getText().isEmpty() && !yy1Field.getText().isEmpty()
            && !dd2Field.getText().isEmpty() && !mm2Field.getText().isEmpty() && !yy2Field.getText().isEmpty() && !mobileField.getText().isEmpty()
            && !mailField.getText().isEmpty() && !emField.getText().isEmpty() && !adrField.getText().isEmpty() && !payableField.getText().isEmpty())
            {  
                    String d1,m1,y1,d2,m2,y2,birthdate,joindate;
                    
                    //DATE VALIDATION
                        //Date 1
                            if(!dd1Field.getText().matches("0?[1-9]|[12][0-9]|3[01]"))
                            {   d1="invalid";
                                JOptionPane.showMessageDialog(rootPane, "Invalid date");
                                dd1Field.requestFocus();
                                dd1Field.setBorder(alert);
                            }
                            else if(dd1Field.getText().length()==1)
                            {   d1="0"+dd1Field.getText();    }
                            else    //correct
                            {   d1=dd1Field.getText();    }
                        //Month 1
                            if(!mm1Field.getText().matches("0?[1-9]|1[0-2]"))
                            {   m1="invalid";    
                                JOptionPane.showMessageDialog(rootPane, "Invalid month");
                                mm1Field.requestFocus();
                                mm1Field.setBorder(alert);
                            }
                            else if(mm1Field.getText().length()==1)
                            {   m1="0"+mm1Field.getText();    }
                            else    //correct
                            {   m1=mm1Field.getText();    }
                        //Year 1
                            if(!yy1Field.getText().matches("[12][0-9]{3}"))     //1000-2999
                            {   y1="invalid";
                                JOptionPane.showMessageDialog(rootPane, "Enter year in yyyy format");
                                yy1Field.requestFocus();
                                yy1Field.setBorder(alert);
                            }
                            else    //correct
                            {   y1=yy1Field.getText();    }
                            
                        //Date 2    
                            if(!dd2Field.getText().matches("0?[1-9]|[12][0-9]|3[01]"))
                            {   d2="invalid"; 
                                JOptionPane.showMessageDialog(rootPane, "Invalid date");
                                dd2Field.requestFocus();
                                dd2Field.setBorder(alert);
                            }
                            else if(dd2Field.getText().length()==1)
                            {   d2="0"+dd2Field.getText();    }
                            else    //correct
                            {   d2=dd2Field.getText();    }
                        //Month 2
                            if(!mm2Field.getText().matches("0?[1-9]|1[0-2]"))
                            {   m2="invalid";  
                                JOptionPane.showMessageDialog(rootPane, "Invalid month");  
                                mm2Field.requestFocus();
                                mm2Field.setBorder(alert);
                            }
                            else if(mm2Field.getText().length()==1)
                            {   m2="0"+mm2Field.getText();    }
                            else    //correct
                            {   m2=mm2Field.getText();    }
                        //Year 2
                            if(!yy2Field.getText().matches("[12][0-9]{3}"))
                            {   y2="invalid";
                                JOptionPane.showMessageDialog(rootPane, "Enter year in yyyy format");
                                yy2Field.requestFocus();
                                yy2Field.setBorder(alert);
                            }
                            else if(yy2Field.getText().length()<4)
                            {   y2="invalid";
                                JOptionPane.showMessageDialog(rootPane, "Enter year in yyyy format");
                                yy2Field.requestFocus();
                                yy2Field.setBorder(alert);
                            }
                            else    //correct
                            {   y2=yy2Field.getText();    }
                    
                            
                            if(!d1.equals("invalid") && !m1.equals("invalid") && !y1.equals("invalid"))
                            {
                                birthdate=y1+"-"+m1+"-"+d1;      //concatinating date to string
                                ldBirth=LocalDate.parse(birthdate);
                            }
                            if(!d2.equals("invalid") && !m2.equals("invalid") && !y2.equals("invalid"))
                            {
                                joindate=y2+"-"+m2+"-"+d2;      //concatinating date to string
                                ldJoin=LocalDate.parse(joindate);
                            }
                    
            //ROOM No Validation  
                    String roomNo;
                    if(roomField.getText().matches("[1-3]0[1-3][a-d]|40[1-3][a-c]|50[1-3][ab]|[6-7]0[1-3]a"))
                    {
                        roomNo=roomField.getText();
                        //JOptionPane.showMessageDialog(rootPane, roomNo);
                    }
                    else
                    {
                        roomNo="invalid";
                        JOptionPane.showMessageDialog(rootPane, "Invalid room number");
                        roomField.requestFocus();
                        roomField.setBorder(alert);
                    }
                    
                    //System.out.print(roomNo);
                    
            //Mobile validation & EMContact validation
                    String mobNo, emContact;
                    if(mobileField.getText().matches("[789][0-9]{9}"))
                    {
                        mobNo=mobileField.getText();
                    }
                    else
                    {
                        mobNo="invalid";
                        JOptionPane.showMessageDialog(rootPane, "Invalid mobile number");
                        mobileField.requestFocus();
                        mobileField.setBorder(alert);
                    }
                    
                    if(emField.getText().matches("[789][0-9]{9}"))
                    {
                        emContact=emField.getText();
                    }
                    else
                    {
                        emContact="invalid";
                        JOptionPane.showMessageDialog(rootPane, "Invalid emergency contact number");
                        emField.requestFocus();
                        emField.setBorder(alert);
                    }
                    
            //email validation
                    String Mailid;
                    if(mailField.getText().matches("([a-z0-9._]{3,64})@([a-z]{4,12}).([a-zA-Z]{2,5})"))
                    {
                        Mailid=mailField.getText();
                    }
                    else
                    {
                        Mailid="invalid";
                        JOptionPane.showMessageDialog(rootPane, "Invalid email ID");
                        mailField.requestFocus();
                        mailField.setBorder(alert);
                    }
                    
            //Food selected
                String choice;
                if(vegBtn.isSelected())
                {
                    choice="veg";
                }
                else if(nonvegBtn.isSelected())
                {
                    choice="nonveg";
                }
                else if(noneBtn.isSelected())
                {
                    choice="none";
                }
                else
                {
                    choice="invalid";
                    JOptionPane.showMessageDialog(rootPane, "Select an option for food service");
                }
                int rent=Integer.parseInt(payableField.getText());
                String addressInput=adrField.getText(), nameInput=nameField.getText();
            if(!d1.equals("invalid") && !m1.equals("invalid") && !y1.equals("invalid") && !d2.equals("invalid") && !m2.equals("invalid") && !y2.equals("invalid")
                && !roomNo.equals("invalid") && !emContact.equals("invalid") && !mobNo.equals("invalid") && !choice.equals("invalid")
                && !Mailid.equals("invalid") && !addressInput.equals("invalid") && !nameInput.equals("invalid"))
            {
                String split[]=roomNo.split("");
                //INSERT TO DATABASE
                try{
                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    Connection con = DriverManager.getConnection(url);
                    Statement stmt = con.createStatement();
                    
                    String qry="UPDATE resident SET name='"+nameInput+"', birthday='"+ldBirth+"', joinFrom='"+ldJoin+"', mobile='"+mobNo+"', mail='"+Mailid+"', emContact='"+emContact+"', adr='"+addressInput+"', food='"+choice+"', rent='"+rent+"', houseStatus='1', deposit='"+depField.getText()+"' WHERE floorNo='"+split[0]+"' AND flatNo='"+split[2]+"' AND person='"+split[3]+"' AND houseStatus='0'";
                    int a=stmt.executeUpdate(qry);
                    if(a>0)
                    {
                        JOptionPane.showMessageDialog(rootPane, "Successfully added");
                        clear.doClick();
                        new RoomDistribution().setVisible(true);
                        dispose();
                    }
                    else
                    {   
                        JOptionPane.showMessageDialog(rootPane, "Room already occupied");
                    }
                    con.close();
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
            }
        }
        else
        {
            if(nameField.getText().isEmpty())
            {
                JOptionPane.showMessageDialog(rootPane, "Requied Field");
                nameField.requestFocus();
                nameField.setBorder(alert);
            }
            else if(dd1Field.getText().isEmpty())
            {
                JOptionPane.showMessageDialog(rootPane, "Requied Field");
                dd1Field.requestFocus();
                dd1Field.setBorder(alert);
            }
            else if(mm1Field.getText().isEmpty())
            {
                JOptionPane.showMessageDialog(rootPane, "Requied Field");
                mm1Field.requestFocus();
                mm1Field.setBorder(alert);
            }
            else if(yy1Field.getText().isEmpty())
            {
                JOptionPane.showMessageDialog(rootPane, "Requied Field");
                yy1Field.requestFocus();
                yy1Field.setBorder(alert);
            }
            else if(dd2Field.getText().isEmpty())
            {
                JOptionPane.showMessageDialog(rootPane, "Requied Field");
                dd2Field.requestFocus();
                dd2Field.setBorder(alert);
            }
            else if(mm2Field.getText().isEmpty())
            {
                JOptionPane.showMessageDialog(rootPane, "Requied Field");
                mm2Field.requestFocus();
                mm2Field.setBorder(alert);
            }
            else if(yy2Field.getText().isEmpty())
            {
                JOptionPane.showMessageDialog(rootPane, "Requied Field");
                yy2Field.requestFocus();
                yy2Field.setBorder(alert);
            }
            else if(mobileField.getText().isEmpty())
            {
                JOptionPane.showMessageDialog(rootPane, "Requied Field");
                mobileField.requestFocus();
                mobileField.setBorder(alert);
            }
            else if(mailField.getText().isEmpty())
            {
                JOptionPane.showMessageDialog(rootPane, "Requied Field");
                mailField.requestFocus();
                mailField.setBorder(alert);
            }
            else if(emField.getText().isEmpty())
            {
                JOptionPane.showMessageDialog(rootPane, "Requied Field");
                emField.requestFocus();
                emField.setBorder(alert);
            }
            else if(adrField.getText().isEmpty())
            {
                JOptionPane.showMessageDialog(rootPane, "Requied Field");
                adrField.requestFocus();
                adrField.setBorder(alert);
            }
            else if(payableField.getText().isEmpty())
            {
                JOptionPane.showMessageDialog(rootPane, "Error occurred, rent cannot be blank");
                payableField.requestFocus();
                payableField.setBorder(alert);
            }
        }
    }//GEN-LAST:event_addActionPerformed
    
    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameFieldActionPerformed

    private void rentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rentMouseClicked
        // TODO add your handling code here:
        rent.addMouseListener(new MouseAdapter(){
           @Override
           public void mouseClicked(MouseEvent e)
           {
               new RentPayment().setVisible(true);
               dispose();
           }
        });
    }//GEN-LAST:event_rentMouseClicked

    private void routineMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_routineMouseClicked
        // TODO add your handling code here:
        routine.addMouseListener(new MouseAdapter(){
           @Override
           public void mouseClicked(MouseEvent e)
           {
               new RoutineCheck().setVisible(true);
               dispose();
           }
        });
    }//GEN-LAST:event_routineMouseClicked

    private void dd1FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dd1FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dd1FieldActionPerformed

    private void dd2FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dd2FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dd2FieldActionPerformed

    private void mm2FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mm2FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mm2FieldActionPerformed

    private void yy1FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yy1FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_yy1FieldActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        // Clear button code:
        roomField.setText("");
        nameField.setText("");
        dd1Field.setText("");
        dd2Field.setText("");
        mm1Field.setText("");
        mm2Field.setText("");
        yy1Field.setText("");
        yy2Field.setText("");
        mobileField.setText("");
        mailField.setText("");
        emField.setText("");
        adrField.setText("");
        if(vegBtn.isSelected())
        {
            vegBtn.doClick();
        }
        if(nonvegBtn.isSelected())
        {
            nonvegBtn.doClick();
        }
        if(noneBtn.isSelected())
        {
            noneBtn.doClick();
        }
        payableField.setText("");
    }//GEN-LAST:event_clearActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // search button code:
        String live[]=roomField.getText().split("");   //floor:live[0] flat:live[2] person:live[3]
        
        if(roomField.getText().matches("[1-3]0[1-3][a-d]|40[1-3][a-c]|50[1-3][ab]|[6-7]0[1-3]a"))
        {
            try
            {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection con = DriverManager.getConnection(url);
                Statement stmt=con.createStatement();

                String sel="SELECT * FROM resident WHERE floorNo='"+live[0]+"' AND flatNo='"+live[2]+"' AND person='"+live[3]+"'";
                //System.out.println("SELECT * FROM resident WHERE floorNo='"+live[0]+"' AND flatNo='"+live[2]+"' AND person='"+live[3]+"'");
                ResultSet output=stmt.executeQuery(sel);
                if(output.next())
                {
                    if(output.getObject("name")!=null)
                    {
                    //JOptionPane.showMessageDialog(rootPane, "Results found!");
                        fullName=output.getString("name");
                        birth=output.getDate("birthday");
                        joined=output.getDate("joinFrom");
                        mobile=output.getString("mobile");
                        email=output.getString("mail");
                        emergency=output.getString("emContact");
                        address=output.getString("adr");
                        food=output.getString("food");
                        rentPay=output.getInt("rent");

                        ldBirth=birth.toLocalDate();     //will help get month, year and date seperately
                        int birthYear=ldBirth.getYear();
                        int birthDate=ldBirth.getDayOfMonth();
                        int birthMonth=ldBirth.getMonthValue();
                        ldJoin=joined.toLocalDate();
                        int joinYear=ldJoin.getYear();
                        int joinDate=ldJoin.getDayOfMonth();
                        int joinMonth=ldJoin.getMonthValue();   
                        nameField.setText(fullName);
                        dd1Field.setText(Integer.toString(birthDate));
                        mm1Field.setText(Integer.toString(birthMonth));
                        yy1Field.setText(Integer.toString(birthYear));
                        dd2Field.setText(Integer.toString(joinDate));
                        mm2Field.setText(Integer.toString(joinMonth));
                        yy2Field.setText(Integer.toString(joinYear));   

                        mobileField.setText(mobile);
                        mailField.setText(email);
                        emField.setText(emergency);
                        adrField.setText(address);
                        payableField.setText(Integer.toString(rentPay));
                        change.setText("Rent Due:");
                        if(food.equals("nonveg"))
                        {
                            if(!nonvegBtn.isSelected())
                            {
                                nonvegBtn.doClick();
                            }
                            if(vegBtn.isSelected())
                            {
                                vegBtn.doClick();
                            }
                            if(noneBtn.isSelected())
                            {
                                noneBtn.doClick();
                            }
                        }
                        else if(food.equals("veg"))
                        {
                            if(!vegBtn.isSelected())
                            {
                                vegBtn.doClick();
                            }
                            if(nonvegBtn.isSelected())
                            {
                                nonvegBtn.doClick();
                            }
                            if(noneBtn.isSelected())
                            {
                                noneBtn.doClick();
                            }
                        }
                        else
                        {
                            if(!noneBtn.isSelected())
                            {
                                noneBtn.doClick();
                            }
                            if(vegBtn.isSelected())
                            {
                                vegBtn.doClick();
                            }
                            if(nonvegBtn.isSelected())
                            {
                                nonvegBtn.doClick();
                            }
                        }
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(rootPane, "This room is not occupied");
                        nameField.setText("");
                        dd1Field.setText("");
                        dd2Field.setText("");
                        mm1Field.setText("");
                        mm2Field.setText("");
                        yy1Field.setText("");
                        yy2Field.setText("");
                        mobileField.setText("");
                        mailField.setText("");
                        emField.setText("");
                        adrField.setText("");
                        if(vegBtn.isSelected())
                        {
                            vegBtn.doClick();
                        }
                        if(nonvegBtn.isSelected())
                        {
                            nonvegBtn.doClick();
                        }
                        if(noneBtn.isSelected())
                        {
                            noneBtn.doClick();
                        }
                        payableField.setText("");
                        if(change.getText().equals("Rent Due:"))
                        {
                            change.setText("Rent per month:");
                        }
                    }
                }
            }
            catch(Exception e){
                e.printStackTrace();
            }
        }
        else if(roomField.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(rootPane, "Enter room number to get details");
        }
        else{
            JOptionPane.showMessageDialog(rootPane, "Invalid room no.");
        }
    }//GEN-LAST:event_searchActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // DELETE RECORD:
        if(roomField.getText().matches("[1-3]0[1-3][a-d]|40[1-3][a-c]|50[1-3][ab]|[6-7]0[1-3]a"))
        {
            String live[]=roomField.getText().split("");
            int floor=Integer.parseInt(live[0]);
            int flat=Integer.parseInt(live[2]);
            String num=live[3];

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

                Connection con = DriverManager.getConnection(url);
                //System.out.println("done");
                //JOptionPane.showMessageDialog(null, "delete data from database");
                Statement stmt = con.createStatement();
                
                int id=0;
            String sel="SELECT * FROM resident WHERE floorNo='"+live[0]+"' AND flatNo='"+live[2]+"' AND person='"+live[3]+"' AND houseStatus='1'";
                //System.out.println("SELECT * FROM resident WHERE floorNo='"+live[0]+"' AND flatNo='"+live[2]+"' AND person='"+live[3]+"'");
                ResultSet output=stmt.executeQuery(sel);
                if(output.next())
                {
                    id=output.getInt("srNo");
                }
                if(id!=0)
                {
                    String sql="UPDATE resident SET name=NULL,birthday=NULL,joinFrom=NULL,mobile=NULL,mail=NULL,emContact=NULL,adr=NULL,food=NULL,rent=NULL,houseStatus='0',rentDate=NULL, deposit=NULL WHERE floorNo='"+floor+"' AND flatNo='"+flat+"' AND person='"+num+"'";
                    int a=stmt.executeUpdate(sql);
                    String sql2="DELETE FROM redFlags WHERE studentID='1'";
                    int b=stmt.executeUpdate(sql2);
                    if(a>0 && b>0)
                    {
                        JOptionPane.showMessageDialog(rootPane, "Deleted successfully");
                        clear.doClick();

                        new RoomDistribution().setVisible(true);
                        dispose();
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null,"No room as such");
                    }
                    con.close();
                }
                else
                {
                    JOptionPane.showMessageDialog(null,"The room is not occupied");
                }
            }
            catch(Exception e)
            {
                System.out.println(e.toString());
            }
        }
        else
        {
            JOptionPane.showMessageDialog(pagePanel, "Invalid room no.");
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void roomFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_roomFieldFocusGained
        // TODO add your handling code here:
        
    }//GEN-LAST:event_roomFieldFocusGained

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        
        ImageIcon icon=new ImageIcon("images/login.png");
        Image img=icon.getImage();
        Image newimg=img.getScaledInstance(24, 22, java.awt.Image.SCALE_SMOOTH);
        ImageIcon finale=new ImageIcon(newimg);
        profile.setIcon(finale);
        
        Component c = (Component) evt.getSource();
        
        try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

                Connection con = DriverManager.getConnection(url);
                Statement stmt = con.createStatement();
                String find="SELECT top 1 * FROM resident WHERE houseStatus='0' order by floorNo, flatNo, person";
                ResultSet op=stmt.executeQuery(find);

                if(!op.next())
                {
                    JOptionPane.showMessageDialog(rootPane, "No Rooms available");
                }
                else
                {
                    //JOptionPane.showMessageDialog(rootPane, "Rooms available");
                    int roomFlat=0, roomFloor=0;
                    String roomPerson="";
                        roomFloor=op.getInt("floorNo");
                        roomFlat=op.getInt("flatNo");
                        roomPerson=op.getString("person");
                    LocalDate ld=LocalDate.now();
                    int date=ld.getDayOfMonth();
                    int month=ld.getMonthValue();
                    int year=ld.getYear();
                        
                    if(roomFlat!=0 && roomFloor!=0)
                    {
                        String roomEmpty=Integer.toString(roomFloor)+"0"+Integer.toString(roomFlat)+roomPerson;
                        //System.out.print(roomEmpty);
                        nameField.requestFocus();
                        roomField.setText(roomEmpty);
                        dd2Field.setText(Integer.toString(date));
                        mm2Field.setText(Integer.toString(month));
                        yy2Field.setText(Integer.toString(year));
                        if(roomFloor>=6)
                        {
                            choiceOpt.setSelectedItem("Premium-1");
                        }
                        else if(roomFloor>=5)
                        {
                            choiceOpt.setSelectedItem("Premium-2");
                        }
                        else if(roomFloor>=4)
                        {
                            choiceOpt.setSelectedItem("Standard-3");
                        }
                        else
                        {
                            choiceOpt.setSelectedItem("Standard-4");
                        }
                    }
                    else
                    {
                        System.out.println("Some Error Occurred");
                    }
                }
                con.close();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_formComponentShown

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowActivated

    private void roomFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomFieldActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
        String div[]=roomField.getText().split("");
        try{
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection(url);
            Statement stmt=con.createStatement();
            
            int id=0;
            String sel="SELECT * FROM resident WHERE floorNo='"+div[0]+"' AND flatNo='"+div[2]+"' AND person='"+div[3]+"' AND houseStatus='1'";
                //System.out.println("SELECT * FROM resident WHERE floorNo='"+live[0]+"' AND flatNo='"+live[2]+"' AND person='"+live[3]+"'");
                ResultSet output=stmt.executeQuery(sel);
                if(output.next())
                {
                    id=output.getInt("srNo");
                }
                if(id!=0)
                {
                        String d1,m1,y1,d2,m2,y2,birth,join;
                        //DATE VALIDATION
                        //Date 1
                            if(!dd1Field.getText().matches("0?[1-9]|[12][0-9]|3[01]"))
                            {   d1="invalid";
                                JOptionPane.showMessageDialog(rootPane, "Invalid date");
                                dd1Field.requestFocus();
                                dd1Field.setBorder(alert);
                            }
                            else if(dd1Field.getText().length()==1)
                            {   d1="0"+dd1Field.getText();    }
                            else    //correct
                            {   d1=dd1Field.getText();    }
                        //Month 1
                            if(!mm1Field.getText().matches("0?[1-9]|1[0-2]"))
                            {   m1="invalid";    
                                JOptionPane.showMessageDialog(rootPane, "Invalid month");
                                mm1Field.requestFocus();
                                mm1Field.setBorder(alert);
                            }
                            else if(mm1Field.getText().length()==1)
                            {   m1="0"+mm1Field.getText();    }
                            else    //correct
                            {   m1=mm1Field.getText();    }
                        //Year 1
                            if(!yy1Field.getText().matches("[12][0-9]{3}"))     //1000-2999
                            {   y1="invalid";
                                JOptionPane.showMessageDialog(rootPane, "Enter year in yyyy format");
                                yy1Field.requestFocus();
                                yy1Field.setBorder(alert);
                            }
                            else    //correct
                            {   y1=yy1Field.getText();    }
                            
                        //Date 2    
                            if(!dd2Field.getText().matches("0?[1-9]|[12][0-9]|3[01]"))
                            {   d2="invalid"; 
                                JOptionPane.showMessageDialog(rootPane, "Invalid date");
                                dd2Field.requestFocus();
                                dd2Field.setBorder(alert);
                            }
                            else if(dd2Field.getText().length()==1)
                            {   d2="0"+dd2Field.getText();    }
                            else    //correct
                            {   d2=dd2Field.getText();    }
                        //Month 2
                            if(!mm2Field.getText().matches("0?[1-9]|1[0-2]"))
                            {   m2="invalid";  
                                JOptionPane.showMessageDialog(rootPane, "Invalid month");  
                                mm2Field.requestFocus();
                                mm2Field.setBorder(alert);
                            }
                            else if(mm2Field.getText().length()==1)
                            {   m2="0"+mm2Field.getText();    }
                            else    //correct
                            {   m2=mm2Field.getText();    }
                        //Year 2
                            if(!yy2Field.getText().matches("[12][0-9]{3}"))
                            {   y2="invalid";
                                JOptionPane.showMessageDialog(rootPane, "Enter year in yyyy format");
                                yy2Field.requestFocus();
                                yy2Field.setBorder(alert);
                            }
                            else if(yy2Field.getText().length()<4)
                            {   y2="invalid";
                                JOptionPane.showMessageDialog(rootPane, "Enter year in yyyy format");
                                yy2Field.requestFocus();
                                yy2Field.setBorder(alert);
                            }
                            else    //correct
                            {   y2=yy2Field.getText();    }
                    
                            
                            if(!d1.equals("invalid") && !m1.equals("invalid") && !y1.equals("invalid"))
                            {
                                birth=y1+"-"+m1+"-"+d1;      //concatinating date to string
                                uBirth=LocalDate.parse(birth);
                            }
                            if(!d2.equals("invalid") && !m2.equals("invalid") && !y2.equals("invalid"))
                            {
                                join=y2+"-"+m2+"-"+d2;      //concatinating date to string
                                uJoin=LocalDate.parse(join);
                            }
                        //Food selected
                            String choice;
                            if(vegBtn.isSelected())
                            {
                                choice="veg";
                            }
                            else if(nonvegBtn.isSelected())
                            {
                                choice="nonveg";
                            }
                            else if(noneBtn.isSelected())
                            {
                                choice="none";
                            }
                            else
                            {
                                choice="invalid";
                                JOptionPane.showMessageDialog(rootPane, "Select an option for food service");
                            }
                            
                            //ROOM No Validation  
                        String roomNo;
                        if(roomField.getText().matches("[1-3]0[1-3][a-d]|40[1-3][a-c]|50[1-3][ab]|[6-7]0[1-3]a"))
                        {
                            roomNo=roomField.getText();
                            //JOptionPane.showMessageDialog(rootPane, roomNo);
                        }
                        else
                        {
                            roomNo="invalid";
                            JOptionPane.showMessageDialog(rootPane, "Invalid room number");
                            roomField.requestFocus();
                            roomField.setBorder(alert);
                        }

                        //System.out.print(roomNo);

                        //Mobile validation & EMContact validation
                        String mobNo, emContact;
                        if(mobileField.getText().matches("[789][0-9]{9}"))
                        {
                            mobNo=mobileField.getText();
                        }
                        else
                        {
                            mobNo="invalid";
                            JOptionPane.showMessageDialog(rootPane, "Invalid mobile number");
                            mobileField.requestFocus();
                            mobileField.setBorder(alert);
                        }

                        if(emField.getText().matches("[789][0-9]{9}"))
                        {
                            emContact=emField.getText();
                        }
                        else
                        {
                            emContact="invalid";
                            JOptionPane.showMessageDialog(rootPane, "Invalid emergency contact number");
                            emField.requestFocus();
                            emField.setBorder(alert);
                        }

                        //email validation
                        String Mailid;
                        if(mailField.getText().matches("([a-z0-9._]{3,64})@([a-z]{4,12}).([a-zA-Z]{2,5})"))
                        {
                            Mailid=mailField.getText();
                        }
                        else
                        {
                            Mailid="invalid";
                            JOptionPane.showMessageDialog(rootPane, "Invalid email ID");
                            mailField.requestFocus();
                            mailField.setBorder(alert);
                        }
            if(!d1.equals("invalid") && !m1.equals("invalid") && !y1.equals("invalid") && !d2.equals("invalid") && !m2.equals("invalid") && !y2.equals("invalid")
                && !roomNo.equals("invalid") && !emContact.equals("invalid") && !mobNo.equals("invalid") && !choice.equals("invalid")
                && !Mailid.equals("invalid") && !rent.equals("invalid") && !nameField.getText().isEmpty() && !adrField.getText().isEmpty())
                {
                    String upd="UPDATE resident SET name='"+nameField.getText()+"', birthday='"+uBirth+"', joinFrom='"+uJoin+"', mobile='"+mobileField.getText()+"', mail='"+mailField.getText()+"', emContact='"+emField.getText()+"', adr='"+adrField.getText()+"', food='"+choice+"', rent='"+payableField.getText()+"', houseStatus='1' WHERE floorNo='"+div[0]+"' AND flatNo='"+div[2]+"' AND person='"+div[3]+"' AND houseStatus='1'";
                    int u=stmt.executeUpdate(upd);
                    if(u==1)
                    {
                        JOptionPane.showMessageDialog(rootPane, "Update Successfull");
                        clear.doClick();

                            new RoomDistribution().setVisible(true);
                            dispose();
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(rootPane, "Invalid fields");
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(rootPane, "All Fields are required");
                }
            }
            else
            {
                JOptionPane.showMessageDialog(rootPane, "The room is not occupied");
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_updateActionPerformed

    private void vegBtnStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_vegBtnStateChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_vegBtnStateChanged

    private void vegBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vegBtnMouseClicked
        // TODO add your handling code here:
        if(vegBtn.isSelected())
        {
            if(nonvegBtn.isSelected())
            {
                nonvegBtn.doClick();
            }
            if(noneBtn.isSelected())
            {
                noneBtn.doClick();
            }
            //
                try
                {
                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    Connection con = DriverManager.getConnection(url);
                    Statement stmt = con.createStatement();
                    
                    int finalCost=0;
                    //System.out.println(finalCost);
                    String food="Select * from feeDetails where opt='veg'";
                    ResultSet rf=stmt.executeQuery(food);
                    if(rf.next())
                    {
                        finalCost=finalCost+rf.getInt("foodCost");
                    }
                    //System.out.println(finalCost);
                    String dep="Select * from feeDetails where opt='"+choiceOpt.getSelectedItem()+"'";
                    ResultSet rd=stmt.executeQuery(dep);
                    if(rd.next())
                    {
                        finalCost=finalCost+rd.getInt("roomRent");
                    }
                    //System.out.println(finalCost);
                    payableField.setText(Integer.toString(finalCost));
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
        }
    }//GEN-LAST:event_vegBtnMouseClicked

    private void nonvegBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nonvegBtnMouseClicked
        // TODO add your handling code here:
        if(nonvegBtn.isSelected())
        {
            if(vegBtn.isSelected())
            {
                vegBtn.doClick();
            }
            if(noneBtn.isSelected())
            {
                noneBtn.doClick();
            }
            //
            try
                {
                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    Connection con = DriverManager.getConnection(url);
                    Statement stmt = con.createStatement();
                    
                    int finalCost=0;
                    //System.out.println(finalCost);
                    String food="Select * from feeDetails where opt='nonveg'";
                    ResultSet rf=stmt.executeQuery(food);
                    if(rf.next())
                    {
                        finalCost=finalCost+rf.getInt("foodCost");
                    }
                    //System.out.println(finalCost);
                    String dep="Select * from feeDetails where opt='"+choiceOpt.getSelectedItem()+"'";
                    ResultSet rd=stmt.executeQuery(dep);
                    if(rd.next())
                    {
                        finalCost=finalCost+rd.getInt("roomRent");
                    }
                    //System.out.println(finalCost);
                    payableField.setText(Integer.toString(finalCost));
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
        }
    }//GEN-LAST:event_nonvegBtnMouseClicked

    private void noneBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_noneBtnMouseClicked
        // TODO add your handling code here:
        if(noneBtn.isSelected())
        {
            if(nonvegBtn.isSelected())
            {
                nonvegBtn.doClick();
            }
            if(vegBtn.isSelected())
            {
                vegBtn.doClick();
            }
            ///////
            try
                {
                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    Connection con = DriverManager.getConnection(url);
                    Statement stmt = con.createStatement();
                    
                    int finalCost=0;
                    //System.out.println(finalCost);
                    String dep="Select * from feeDetails where opt='"+choiceOpt.getSelectedItem()+"'";
                    ResultSet rd=stmt.executeQuery(dep);
                    if(rd.next())
                    {
                        finalCost=finalCost+rd.getInt("roomRent");
                    }
                    //System.out.println(finalCost);
                    payableField.setText(Integer.toString(finalCost));
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
        }
    }//GEN-LAST:event_noneBtnMouseClicked

    private void nonvegBtnStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_nonvegBtnStateChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_nonvegBtnStateChanged

    private void noneBtnStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_noneBtnStateChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_noneBtnStateChanged

    private void formWindowDeactivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeactivated
        // TODO add your handling code here:
        //JOptionPane.showMessageDialog(rootPane, "window deactivated");
        //WRITE CODE HERE FOR UPDATING NO. OF PEOPLE IN THE building TABLE
        
                try
                {
                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    Connection con = DriverManager.getConnection(url);
                    Statement st=con.createStatement();
                    for(int x=1;x<=3;x++)   //3 floors
                    {
                        for(int y=1;y<=3;y++)   //3 flats
                        {
                            String is="SELECT * FROM resident WHERE houseStatus='1' AND floorNo='"+x+"' AND flatNo='"+y+"'";
                            ResultSet result=st.executeQuery(is);
                            int count=0;
                            while(result.next())
                            {
                                count++;
                            }
                            //System.out.println(count);
                            String update="UPDATE building SET people='"+count+"' WHERE floorNo='"+x+"' AND flatNo='"+y+"'";
                            st.executeUpdate(update);
                        }
                    }
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
    }//GEN-LAST:event_formWindowDeactivated

    private void formWindowLostFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowLostFocus
        // TODO add your handling code here:
        
    }//GEN-LAST:event_formWindowLostFocus

    private void kitchenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_kitchenMouseClicked
        // TODO add your handling code here:
        new KitchenMaterials().setVisible(true);
        dispose();
    }//GEN-LAST:event_kitchenMouseClicked

    private void dashboardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dashboardMouseClicked
        // TODO add your handling code here:
        new Dashboard().setVisible(true);
        dispose();
    }//GEN-LAST:event_dashboardMouseClicked

    private void billMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_billMouseClicked
        // TODO add your handling code here:
        new BillPayment().setVisible(true);
        dispose();
    }//GEN-LAST:event_billMouseClicked

    private void choiceOptItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_choiceOptItemStateChanged
        // TODO add your handling code here:
                LocalDate ld=LocalDate.now();
                int date=ld.getDayOfMonth();
                int month=ld.getMonthValue();
                int year=ld.getYear();
                            
        if(!nameField.getText().isEmpty())
        {   nameField.setText("");  }
        if(!dd1Field.getText().isEmpty())
        {   dd1Field.setText("");   }
        if(!mm1Field.getText().isEmpty())
        {   mm1Field.setText("");   }
        if(!yy1Field.getText().isEmpty())
        {   yy1Field.setText("");   }
        
        if(Integer.parseInt(dd2Field.getText())!=date)
        {   dd2Field.setText(Integer.toString(date));   }
        if(Integer.parseInt(mm2Field.getText())!=month)
        {   mm2Field.setText(Integer.toString(month));   }
        if(Integer.parseInt(yy2Field.getText())!=year)
        {   yy2Field.setText(Integer.toString(year));   }
        
        if(!mobileField.getText().isEmpty())
        {
            mobileField.setText("");
        }
        if(!mailField.getText().isEmpty())
        {
            mailField.setText("");
        }
        if(!emField.getText().isEmpty())
        {
            emField.setText("");
        }
        if(!adrField.getText().isEmpty())
        {
            adrField.setText("");
        }
        if(!payableField.getText().isEmpty())
        {
            payableField.setText("");
        }
        
            if(vegBtn.isSelected())
            {
                vegBtn.doClick();
            }
            if(nonvegBtn.isSelected())
            {
                nonvegBtn.doClick();
            }
            if(noneBtn.isSelected())
            {
                noneBtn.doClick();
            }
        ///
        if(!roomField.getText().isEmpty())
        {
            if(choiceOpt.getSelectedItem()=="Standard-4")
            {
                try
                    {
                        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                        Connection con = DriverManager.getConnection(url);
                        Statement stmt = con.createStatement();
                        //depField.setText("5000");
                        String l="SELECT * FROM feeDetails WHERE opt='"+choiceOpt.getSelectedItem()+"'";
                        ResultSet rl=stmt.executeQuery(l);
                        if(rl.next())
                        {
                            depField.setText(Integer.toString(rl.getInt("roomDeposit")));
                        }
                    }
                catch(Exception e)
                    {
                        e.printStackTrace();
                    }
                String a[]=roomField.getText().split("");
                if(Integer.parseInt(a[0])<4){
                    
                }
                else
                {
                    try
                    {
                        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                        Connection con = DriverManager.getConnection(url);
                        Statement stmt = con.createStatement();
                        
                        String find="SELECT top 1 * FROM resident WHERE houseStatus='0' AND floorNo<'4' order by floorNo, flatNo, person";
                        ResultSet op=stmt.executeQuery(find);

                        if(!op.next())
                        {
                            JOptionPane.showMessageDialog(rootPane, "No Standard-4 rooms available");
                        }
                        else
                        {
                            //JOptionPane.showMessageDialog(rootPane, "Rooms available");
                            int roomFlat=0, roomFloor=0;
                            String roomPerson="";
                                roomFloor=op.getInt("floorNo");
                                roomFlat=op.getInt("flatNo");
                                roomPerson=op.getString("person");

                            if(roomFlat!=0 && roomFloor!=0)
                            {
                                String roomEmpty=Integer.toString(roomFloor)+"0"+Integer.toString(roomFlat)+roomPerson;
                                //System.out.print(roomEmpty);
                                roomField.setText(roomEmpty);
                                if(dd2Field.getText().isEmpty() && mm2Field.getText().isEmpty() && yy2Field.getText().isEmpty())
                                {
                                    dd2Field.setText(Integer.toString(date));
                                    mm2Field.setText(Integer.toString(month));
                                    yy2Field.setText(Integer.toString(year));
                                }
                            }
                            else
                            {
                                System.out.println("Some Error Occurred");
                            }
                        }
                    }
                    catch(Exception e)
                    {
                        e.printStackTrace();
                    }
                }
            }
            else if(choiceOpt.getSelectedItem()=="Standard-3")
            {
                try
                    {
                        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                        Connection con = DriverManager.getConnection(url);
                        Statement stmt = con.createStatement();
                        //depField.setText("5000");
                        String l="SELECT * FROM feeDetails WHERE opt='"+choiceOpt.getSelectedItem()+"'";
                        ResultSet rl=stmt.executeQuery(l);
                        if(rl.next())
                        {
                            depField.setText(Integer.toString(rl.getInt("roomDeposit")));
                        }
                    }
                catch(Exception e)
                    {
                        e.printStackTrace();
                    }
                String a[]=roomField.getText().split("");
                if(Integer.parseInt(a[0])==4){}
                else
                {
                    try
                    {
                        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                        Connection con = DriverManager.getConnection(url);
                        Statement stmt = con.createStatement();
                        
                        String find="SELECT top 1 * FROM resident WHERE houseStatus='0' AND floorNo='4' order by floorNo, flatNo, person";
                        ResultSet op=stmt.executeQuery(find);

                        if(!op.next())
                        {
                            JOptionPane.showMessageDialog(rootPane, "No Standard-3 rooms available");
                        }
                        else
                        {
                            //JOptionPane.showMessageDialog(rootPane, "Rooms available");
                            int roomFlat=0, roomFloor=0;
                            String roomPerson="";
                                roomFloor=op.getInt("floorNo");
                                roomFlat=op.getInt("flatNo");
                                roomPerson=op.getString("person");

                            if(roomFlat!=0 && roomFloor!=0)
                            {
                                String roomEmpty=Integer.toString(roomFloor)+"0"+Integer.toString(roomFlat)+roomPerson;
                                //System.out.print(roomEmpty);
                                roomField.setText(roomEmpty);
                                if(dd2Field.getText().isEmpty() && mm2Field.getText().isEmpty() && yy2Field.getText().isEmpty())
                                {
                                    dd2Field.setText(Integer.toString(date));
                                    mm2Field.setText(Integer.toString(month));
                                    yy2Field.setText(Integer.toString(year));
                                }
                            }
                            else
                            {
                                System.out.println("Some Error Occurred");
                            }
                        }
                    }
                    catch(Exception e)
                    {
                        e.printStackTrace();
                    }
                }
            }
            else if(choiceOpt.getSelectedItem()=="Premium-2")
            {
                try
                    {
                        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                        Connection con = DriverManager.getConnection(url);
                        Statement stmt = con.createStatement();
                        //depField.setText("5000");
                        String l="SELECT * FROM feeDetails WHERE opt='"+choiceOpt.getSelectedItem()+"'";
                        ResultSet rl=stmt.executeQuery(l);
                        if(rl.next())
                        {
                            depField.setText(Integer.toString(rl.getInt("roomDeposit")));
                        }
                    }
                catch(Exception e)
                    {
                        e.printStackTrace();
                    }
                String a[]=roomField.getText().split("");
                if(Integer.parseInt(a[0])==5){}
                else
                {
                    try
                    {
                        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                        Connection con = DriverManager.getConnection(url);
                        Statement stmt = con.createStatement();
                        
                        String find="SELECT top 1 * FROM resident WHERE houseStatus='0' AND floorNo='5' order by floorNo, flatNo, person";
                        ResultSet op=stmt.executeQuery(find);

                        if(!op.next())
                        {
                            JOptionPane.showMessageDialog(rootPane, "No Premium-2 rooms available");
                        }
                        else
                        {
                            //JOptionPane.showMessageDialog(rootPane, "Rooms available");
                            int roomFlat=0, roomFloor=0;
                            String roomPerson="";
                                roomFloor=op.getInt("floorNo");
                                roomFlat=op.getInt("flatNo");
                                roomPerson=op.getString("person");

                            if(roomFlat!=0 && roomFloor!=0)
                            {
                                String roomEmpty=Integer.toString(roomFloor)+"0"+Integer.toString(roomFlat)+roomPerson;
                                //System.out.print(roomEmpty);
                                roomField.setText(roomEmpty);
                                if(dd2Field.getText().isEmpty() && mm2Field.getText().isEmpty() && yy2Field.getText().isEmpty())
                                {
                                    dd2Field.setText(Integer.toString(date));
                                    mm2Field.setText(Integer.toString(month));
                                    yy2Field.setText(Integer.toString(year));
                                }
                            }
                            else
                            {
                                System.out.println("Some Error Occurred");
                            }
                        }
                    }
                    catch(Exception e)
                    {
                        e.printStackTrace();
                    }
                }
            }
            else if(choiceOpt.getSelectedItem()=="Premium-1")
            {
                try
                    {
                        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                        Connection con = DriverManager.getConnection(url);
                        Statement stmt = con.createStatement();
                        //depField.setText("5000");
                        String l="SELECT * FROM feeDetails WHERE opt='"+choiceOpt.getSelectedItem()+"'";
                        ResultSet rl=stmt.executeQuery(l);
                        if(rl.next())
                        {
                            depField.setText(Integer.toString(rl.getInt("roomDeposit")));
                        }
                    }
                catch(Exception e)
                    {
                        e.printStackTrace();
                    }
                String a[]=roomField.getText().split("");
                if(Integer.parseInt(a[0])>5){}
                else
                {
                    try
                    {
                        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                        Connection con = DriverManager.getConnection(url);
                        Statement stmt = con.createStatement();
                        
                        String find="SELECT top 1 * FROM resident WHERE houseStatus='0' AND floorNo>'5' order by floorNo, flatNo, person";
                        ResultSet op=stmt.executeQuery(find);

                        if(!op.next())
                        {
                            JOptionPane.showMessageDialog(rootPane, "No Premium-1 rooms available");
                        }
                        else
                        {
                            //JOptionPane.showMessageDialog(rootPane, "Rooms available");
                            int roomFlat=0, roomFloor=0;
                            String roomPerson="";
                                roomFloor=op.getInt("floorNo");
                                roomFlat=op.getInt("flatNo");
                                roomPerson=op.getString("person");

                            if(roomFlat!=0 && roomFloor!=0)
                            {
                                String roomEmpty=Integer.toString(roomFloor)+"0"+Integer.toString(roomFlat)+roomPerson;
                                //System.out.print(roomEmpty);
                                roomField.setText(roomEmpty);
                                if(dd2Field.getText().isEmpty() && mm2Field.getText().isEmpty() && yy2Field.getText().isEmpty())
                                {
                                    dd2Field.setText(Integer.toString(date));
                                    mm2Field.setText(Integer.toString(month));
                                    yy2Field.setText(Integer.toString(year));
                                }
                            }
                            else
                            {
                                System.out.println("Some Error Occurred");
                            }
                        }
                    }
                    catch(Exception e)
                    {
                        e.printStackTrace();
                    }
                }
            }
            else
            {
                roomField.setText("");
                depField.setText("");
            }
        }
        /////////////////////////////
        else
        {
            if(choiceOpt.getSelectedItem()=="Standard-4")
            {
                    try
                    {
                        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

                        Connection con = DriverManager.getConnection(url);
                        Statement stmt = con.createStatement();
                        String find="SELECT top 1 * FROM resident WHERE houseStatus='0' AND floorNo<'4' order by floorNo, flatNo, person";
                        ResultSet op=stmt.executeQuery(find);

                        if(!op.next())
                        {
                            JOptionPane.showMessageDialog(rootPane, "No Standard-4 rooms available");
                        }
                        else
                        {
                            //JOptionPane.showMessageDialog(rootPane, "Rooms available");
                            int roomFlat=0, roomFloor=0;
                            String roomPerson="";
                                roomFloor=op.getInt("floorNo");
                                roomFlat=op.getInt("flatNo");
                                roomPerson=op.getString("person");

                            if(roomFlat!=0 && roomFloor!=0)
                            {
                                String roomEmpty=Integer.toString(roomFloor)+"0"+Integer.toString(roomFlat)+roomPerson;
                                //System.out.print(roomEmpty);
                                roomField.setText(roomEmpty);
                                if(dd2Field.getText().isEmpty() && mm2Field.getText().isEmpty() && yy2Field.getText().isEmpty())
                                {
                                    dd2Field.setText(Integer.toString(date));
                                    mm2Field.setText(Integer.toString(month));
                                    yy2Field.setText(Integer.toString(year));
                                }
                            }
                            else
                            {
                                System.out.println("Some Error Occurred");
                            }
                        }
                    }
                    catch(Exception e)
                    {
                        e.printStackTrace();
                    }
            }
            else if(choiceOpt.getSelectedItem()=="Standard-3")
            {
                    try
                    {
                        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

                        Connection con = DriverManager.getConnection(url);
                        Statement stmt = con.createStatement();
                        String find="SELECT top 1 * FROM resident WHERE houseStatus='0' AND floorNo='4' order by floorNo, flatNo, person";
                        ResultSet op=stmt.executeQuery(find);

                        if(!op.next())
                        {
                            JOptionPane.showMessageDialog(rootPane, "No Standard-3 rooms available");
                        }
                        else
                        {
                            //JOptionPane.showMessageDialog(rootPane, "Rooms available");
                            int roomFlat=0, roomFloor=0;
                            String roomPerson="";
                                roomFloor=op.getInt("floorNo");
                                roomFlat=op.getInt("flatNo");
                                roomPerson=op.getString("person");

                            if(roomFlat!=0 && roomFloor!=0)
                            {
                                String roomEmpty=Integer.toString(roomFloor)+"0"+Integer.toString(roomFlat)+roomPerson;
                                //System.out.print(roomEmpty);
                                roomField.setText(roomEmpty);
                                if(dd2Field.getText().isEmpty() && mm2Field.getText().isEmpty() && yy2Field.getText().isEmpty())
                                {
                                    dd2Field.setText(Integer.toString(date));
                                    mm2Field.setText(Integer.toString(month));
                                    yy2Field.setText(Integer.toString(year));
                                }
                            }
                            else
                            {
                                System.out.println("Some Error Occurred");
                            }
                        }
                    }
                    catch(Exception e)
                    {
                        e.printStackTrace();
                    }
            }
            else if(choiceOpt.getSelectedItem()=="Premium-2")
            {
                    try
                    {
                        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

                        Connection con = DriverManager.getConnection(url);
                        Statement stmt = con.createStatement();
                        String find="SELECT top 1 * FROM resident WHERE houseStatus='0' AND floorNo='5' order by floorNo, flatNo, person";
                        ResultSet op=stmt.executeQuery(find);

                        if(!op.next())
                        {
                            JOptionPane.showMessageDialog(rootPane, "No Premium-2 rooms available");
                        }
                        else
                        {
                            //JOptionPane.showMessageDialog(rootPane, "Rooms available");
                            int roomFlat=0, roomFloor=0;
                            String roomPerson="";
                                roomFloor=op.getInt("floorNo");
                                roomFlat=op.getInt("flatNo");
                                roomPerson=op.getString("person");

                            if(roomFlat!=0 && roomFloor!=0)
                            {
                                String roomEmpty=Integer.toString(roomFloor)+"0"+Integer.toString(roomFlat)+roomPerson;
                                //System.out.print(roomEmpty);
                                roomField.setText(roomEmpty);
                                if(dd2Field.getText().isEmpty() && mm2Field.getText().isEmpty() && yy2Field.getText().isEmpty())
                                {
                                    dd2Field.setText(Integer.toString(date));
                                    mm2Field.setText(Integer.toString(month));
                                    yy2Field.setText(Integer.toString(year));
                                }
                            }
                            else
                            {
                                System.out.println("Some Error Occurred");
                            }
                        }
                    }
                    catch(Exception e)
                    {
                        e.printStackTrace();
                    }
            }
            else if(choiceOpt.getSelectedItem()=="Premium-1")
            {
                    try
                    {
                        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

                        Connection con = DriverManager.getConnection(url);
                        Statement stmt = con.createStatement();
                        String find="SELECT top 1 * FROM resident WHERE houseStatus='0' AND floorNo>'5' order by floorNo, flatNo, person";
                        ResultSet op=stmt.executeQuery(find);

                        if(!op.next())
                        {
                            JOptionPane.showMessageDialog(rootPane, "No Premium-1 rooms available");
                        }
                        else
                        {
                            //JOptionPane.showMessageDialog(rootPane, "Rooms available");
                            int roomFlat=0, roomFloor=0;
                            String roomPerson="";
                                roomFloor=op.getInt("floorNo");
                                roomFlat=op.getInt("flatNo");
                                roomPerson=op.getString("person");

                            if(roomFlat!=0 && roomFloor!=0)
                            {
                                String roomEmpty=Integer.toString(roomFloor)+"0"+Integer.toString(roomFlat)+roomPerson;
                                //System.out.print(roomEmpty);
                                roomField.setText(roomEmpty);
                                if(dd2Field.getText().isEmpty() && mm2Field.getText().isEmpty() && yy2Field.getText().isEmpty())
                                {
                                    dd2Field.setText(Integer.toString(date));
                                    mm2Field.setText(Integer.toString(month));
                                    yy2Field.setText(Integer.toString(year));
                                }
                            }
                            else
                            {
                                System.out.println("Some Error Occurred");
                            }
                        }
                    }
                    catch(Exception e)
                    {
                        e.printStackTrace();
                    }
            }
        }
    }//GEN-LAST:event_choiceOptItemStateChanged

    private void roomFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_roomFieldKeyReleased
        // TODO add your handling code here:
            if(vegBtn.isSelected())
            {
                vegBtn.doClick();
            }
            if(nonvegBtn.isSelected())
            {
                nonvegBtn.doClick();
            }
            if(noneBtn.isSelected())
            {
                noneBtn.doClick();
            }
    }//GEN-LAST:event_roomFieldKeyReleased

    private void roomFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_roomFieldFocusLost
        // TODO add your handling code here:
        if(!roomField.getText().isEmpty())
        {
            if(roomField.getText().matches("[1-3]0[1-3][a-d]|40[1-3][a-c]|50[1-3][ab]|[6-7]0[1-3]a"))
            {
                String a[]=roomField.getText().split("");
                if(Integer.parseInt(a[0])>=6)
                {
                    choiceOpt.setSelectedItem("Premium-1");
                }
                else if(Integer.parseInt(a[0])>=5)
                {
                    choiceOpt.setSelectedItem("Premium-2");
                }
                else if(Integer.parseInt(a[0])>=4)
                {
                    choiceOpt.setSelectedItem("Standard-3");
                }
                else
                {
                    choiceOpt.setSelectedItem("Standard-4");
                }
            }
            else
            {
                JOptionPane.showMessageDialog(pagePanel, "Invalid Room no.");
                roomField.requestFocus();
            }
        }
    }//GEN-LAST:event_roomFieldFocusLost

    private void depFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_depFieldActionPerformed

    private void payableFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payableFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_payableFieldActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        try
        {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection(url);
            Statement stmt=con.createStatement();
            
            //////Update monthly revenue & expense
            int cur_m=LocalDate.now().getMonthValue();
            int cur_y=LocalDate.now().getYear();
            int exists;
            String check="SELECT * FROM profLoss WHERE months='"+cur_m+"' AND years='"+cur_y+"'";
            ResultSet r_check=stmt.executeQuery(check);
            if(r_check.next())
            { 
                exists=1;
            }
            else
            {
                exists=0;
            }
            
            ////////////....................................................///////////////////////
            String fDate="01";
            String month=Integer.toString(LocalDate.now().getMonthValue());
            int year=LocalDate.now().getYear();
            
        //Max date in a month    
            YearMonth yearMonthObject = YearMonth.of(year, LocalDate.now().getMonthValue());
            int daysInMonth = yearMonthObject.lengthOfMonth();
            int lDate=daysInMonth;
        
            if(month.length()==1)
            {
                month="0"+month;
            }
            
            String start=year+"-"+month+"-"+fDate;
            String last=year+"-"+month+"-"+lDate;
            LocalDate lStart=LocalDate.parse(start);
            LocalDate lLast=LocalDate.parse(last);
            
            int veg=0, nonveg=0;
                        String v="Select foodCost AS f from feeDetails where opt='veg'";
                        ResultSet rv=stmt.executeQuery(v);
                        if(rv.next())
                        {
                            veg=rv.getInt("f");
                        }
                        
                        String nv="Select foodCost AS f from feeDetails where opt='nonveg'";
                        ResultSet rnv=stmt.executeQuery(nv);
                        if(rnv.next())
                        {
                            nonveg=rnv.getInt("f");
                        }
                        
            int std4=0, std3=0, pre2=0, pre1=0;
                        String rent4="Select roomRent AS r from feeDetails where opt='Standard-4'";
                        ResultSet rs4=stmt.executeQuery(rent4);
                        if(rs4.next())
                        {
                            std4=rs4.getInt("r");
                        }
                        
                        String rent3="Select roomRent AS r from feeDetails where opt='Standard-3'";
                        ResultSet rs3=stmt.executeQuery(rent3);
                        if(rs3.next())
                        {
                            std3=rs3.getInt("r");
                        }
                        
                        String rent2="Select roomRent AS r from feeDetails where opt='Premium-2'";
                        ResultSet rs2=stmt.executeQuery(rent2);
                        if(rs2.next())
                        {
                            pre2=rs2.getInt("r");
                        }
                        
                        String rent1="Select roomRent AS r from feeDetails where opt='Premium-1'";
                        ResultSet rs1=stmt.executeQuery(rent1);
                        if(rs1.next())
                        {
                            pre1=rs1.getInt("r");
                        }
            int sum=0;
            String otp="SELECT * FROM resident WHERE houseStatus='1'";
            ResultSet rop=stmt.executeQuery(otp);
            while(rop.next())
            {
             //check if revenue only for people joined in or before the month
                LocalDate din=rop.getDate("joinFrom").toLocalDate();
                if(din.isBefore(lLast) || din.isEqual(lLast))
                {
                    //System.out.println(din);
                    if(rop.getString("food").equals("veg"))
                    {   //food=2000;  sum+=food;  
                        sum+=veg;
                    }
                    else if(rop.getString("food").equals("nonveg"))
                    {   //food=3500;  sum+=food;  
                        sum+=nonveg;
                    }
                    else
                    {   sum+=0;  }
                    
                    //////////
                    if(rop.getInt("floorNo")<4)
                    {  
                        sum+=std4;
                    }
                    else if(rop.getInt("floorNo")==4)
                    {
                        sum+=std3;
                    }
                    else if(rop.getInt("floorNo")==5)
                    {
                        sum+=pre2;
                    }
                    else if(rop.getInt("floorNo")>5)
                    {
                        sum+=pre1;
                    }
                }
            }
            //System.out.println("Revenue: "+sum);    //revenue in current month includes everyone joined this month and before
            
            String exp="SELECT sum(price) as monthExp FROM inventory WHERE month(buyDate)='"+month+"'";
            int tot=0;
            ResultSet rexp=stmt.executeQuery(exp);
            if(rexp.next())
            {   tot=rexp.getInt("monthExp");    }
            
            ////////////////////............................................................///////////////////////
            if(exists==0)
            {// doesn't exist-> insert
                //JOptionPane.showMessageDialog(pagePanel, "not exists");
                String qry="INSERT INTO profLoss(months, years, revenue, expense) VALUES('"+cur_m+"','"+cur_y+"','"+sum+"','"+tot+"')";
                int a=stmt.executeUpdate(qry);
                if(a==1)
                {
                    //System.out.println("Insert successful");
                }
                else
                {
                    //System.out.println("Insert not successful");
                }
            }
            else
            {// exists-> update
                //JOptionPane.showMessageDialog(pagePanel, "exists");
                String qry="UPDATE profLoss SET revenue='"+sum+"', expense='"+tot+"' WHERE months='"+cur_m+"' AND years='"+cur_y+"'";
                //System.out.println(qry);
                int a=stmt.executeUpdate(qry);
                if(a==1)
                {
                    //System.out.println("Update successful");
                }
                else
                {
                    //System.out.println("Update not successful");
                }
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_formWindowClosed

    private void reportsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reportsMouseClicked
        // TODO add your handling code here:
        new Reports().setVisible(true);
        dispose();
    }//GEN-LAST:event_reportsMouseClicked

    private void profileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_profileMouseClicked
        // TODO add your handling code here:
        new LoginPage().setVisible(true);
        dispose();
    }//GEN-LAST:event_profileMouseClicked

    private void feeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_feeMouseClicked
        // TODO add your handling code here:
        new Fees().setVisible(true);
        dispose();
    }//GEN-LAST:event_feeMouseClicked

    private void staffMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_staffMouseClicked
        // TODO add your handling code here:
        new Staff().setVisible(true);
        dispose();
    }//GEN-LAST:event_staffMouseClicked
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws SQLException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RoomDistribution.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RoomDistribution.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RoomDistribution.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RoomDistribution.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RoomDistribution().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JTextArea adrField;
    private javax.swing.JLabel bill;
    private javax.swing.JLabel change;
    private javax.swing.JComboBox choiceOpt;
    private javax.swing.JButton clear;
    private javax.swing.JLabel dashboard;
    private javax.swing.JTextField dd1Field;
    private javax.swing.JTextField dd2Field;
    private javax.swing.JButton delete;
    private javax.swing.JTextField depField;
    private javax.swing.JTextField emField;
    private javax.swing.JLabel fee;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel kitchen;
    private javax.swing.JTextField mailField;
    private javax.swing.JTextField mm1Field;
    private javax.swing.JTextField mm2Field;
    private javax.swing.JTextField mobileField;
    private javax.swing.JTextField nameField;
    private javax.swing.JRadioButton noneBtn;
    private javax.swing.JRadioButton nonvegBtn;
    private javax.swing.JPanel pagePanel;
    private javax.swing.JTextField payableField;
    private javax.swing.JLabel profile;
    private javax.swing.JLabel rent;
    private javax.swing.JLabel reports;
    private javax.swing.JLabel room;
    private javax.swing.JTextField roomField;
    private javax.swing.JLabel routine;
    private javax.swing.JButton search;
    private javax.swing.JLabel staff;
    private javax.swing.JButton update;
    private javax.swing.JRadioButton vegBtn;
    private javax.swing.JTextField yy1Field;
    private javax.swing.JTextField yy2Field;
    // End of variables declaration//GEN-END:variables
}
