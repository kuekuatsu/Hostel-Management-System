
import java.awt.Graphics2D;
import java.awt.GraphicsEnvironment;
import java.awt.Image;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.YearMonth;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Ridisha Shetty
 */
public class RentPayment extends javax.swing.JFrame {

    /**
     * Creates new form RentPayment
     */
    public RentPayment() {
        initComponents();
        Point center = GraphicsEnvironment.getLocalGraphicsEnvironment().getCenterPoint();
        int windowWidth = this.getWidth();
        int windowHeight = this.getHeight();
        this.setBounds(center.x - windowWidth / 2, center.y - windowHeight / 2, windowWidth,
            windowHeight);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pagePanel = new javax.swing.JPanel();
        rent = new javax.swing.JLabel();
        room = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        nameField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        roomField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        amtDue = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        pay = new javax.swing.JButton();
        amtPaid = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        leftBtn = new javax.swing.JButton();
        rightBtn = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        codeField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        dueDate = new javax.swing.JLabel();
        dashboard = new javax.swing.JLabel();
        routine = new javax.swing.JLabel();
        kitchen = new javax.swing.JLabel();
        bill = new javax.swing.JLabel();
        bill1 = new javax.swing.JLabel();
        profile = new javax.swing.JLabel();
        fee = new javax.swing.JLabel();
        staff = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PAY RENT");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        pagePanel.setBackground(new java.awt.Color(238, 255, 237));

        rent.setFont(new java.awt.Font("Yu Gothic", 1, 12)); // NOI18N
        rent.setText("Rent Payment");

        room.setFont(new java.awt.Font("Yu Gothic", 0, 12)); // NOI18N
        room.setForeground(new java.awt.Color(0, 51, 255));
        room.setText("Room Distribution");
        room.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                roomMouseClicked(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 102, 0), null, null, new java.awt.Color(0, 102, 0)));

        jLabel5.setText("Amount Paid:");

        roomField.setToolTipText("");
        roomField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                roomFieldKeyReleased(evt);
            }
        });

        jLabel3.setText("Resident Name:");

        jLabel2.setText("Room no.:");

        jLabel4.setText("Amount Due:");

        pay.setBackground(new java.awt.Color(255, 255, 255));
        pay.setForeground(new java.awt.Color(0, 102, 0));
        pay.setText("Make Payment");
        pay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payActionPerformed(evt);
            }
        });

        amtPaid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                amtPaidKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                amtPaidKeyReleased(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(0, 102, 0));
        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 102, 0), null, null, new java.awt.Color(0, 102, 0)));

        jLabel1.setFont(new java.awt.Font("Yu Gothic Light", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("PAY RENT");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap())
        );

        leftBtn.setText("<");
        leftBtn.setActionCommand("");
        leftBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftBtnActionPerformed(evt);
            }
        });

        rightBtn.setText(">");
        rightBtn.setActionCommand("");
        rightBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightBtnActionPerformed(evt);
            }
        });

        jLabel6.setText("Discount Code:");

        codeField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                codeFieldKeyReleased(evt);
            }
        });

        jLabel7.setText("Due Since:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(11, 11, 11)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(amtPaid, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(codeField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(2, 2, 2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))
                                .addGap(18, 18, 18))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(43, 43, 43)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(leftBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(roomField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rightBtn))
                            .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(dueDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(amtDue, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)))))
                .addContainerGap(25, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pay)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(leftBtn)
                    .addComponent(rightBtn))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(amtDue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel7))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dueDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(amtPaid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(codeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(pay)
                .addContainerGap())
        );

        dashboard.setFont(new java.awt.Font("Yu Gothic", 0, 12)); // NOI18N
        dashboard.setForeground(new java.awt.Color(0, 51, 255));
        dashboard.setText("Dashboard");
        dashboard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dashboardMouseClicked(evt);
            }
        });

        routine.setFont(new java.awt.Font("Yu Gothic", 0, 12)); // NOI18N
        routine.setForeground(new java.awt.Color(0, 51, 255));
        routine.setText("Routine Check");
        routine.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                routineMouseClicked(evt);
            }
        });

        kitchen.setFont(new java.awt.Font("Yu Gothic", 0, 12)); // NOI18N
        kitchen.setForeground(new java.awt.Color(0, 51, 255));
        kitchen.setText("Kitchen Materials");
        kitchen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                kitchenMouseClicked(evt);
            }
        });

        bill.setFont(new java.awt.Font("Yu Gothic", 0, 12)); // NOI18N
        bill.setForeground(new java.awt.Color(0, 51, 255));
        bill.setText("Pay Bill");
        bill.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                billMouseClicked(evt);
            }
        });

        bill1.setFont(new java.awt.Font("Yu Gothic", 0, 12)); // NOI18N
        bill1.setForeground(new java.awt.Color(0, 51, 255));
        bill1.setText("Add Reports");
        bill1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bill1MouseClicked(evt);
            }
        });

        profile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                profileMouseClicked(evt);
            }
        });

        fee.setFont(new java.awt.Font("Yu Gothic", 0, 12)); // NOI18N
        fee.setForeground(new java.awt.Color(0, 51, 255));
        fee.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        fee.setText("Fee Details");
        fee.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                feeMouseClicked(evt);
            }
        });

        staff.setFont(new java.awt.Font("Yu Gothic", 0, 12)); // NOI18N
        staff.setForeground(new java.awt.Color(0, 51, 255));
        staff.setText("Staff Manage");
        staff.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                staffMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pagePanelLayout = new javax.swing.GroupLayout(pagePanel);
        pagePanel.setLayout(pagePanelLayout);
        pagePanelLayout.setHorizontalGroup(
            pagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pagePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(profile, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dashboard)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(routine)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(room)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rent)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(kitchen)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bill)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bill1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fee)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(staff)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pagePanelLayout.setVerticalGroup(
            pagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(dashboard)
                        .addComponent(routine)
                        .addComponent(room)
                        .addComponent(rent)
                        .addComponent(kitchen)
                        .addComponent(bill)
                        .addComponent(bill1)
                        .addComponent(fee)
                        .addComponent(staff))
                    .addComponent(profile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pagePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    String url = "jdbc:sqlserver://192.168.0.98:1433;databaseName=hostel;integratedSecurity=true";
    private void routineMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_routineMouseClicked
        // TODO add your handling code here:
        routine.addMouseListener(new MouseAdapter(){
           @Override
           public void mouseClicked(MouseEvent e)
           {
               new RoutineCheck().setVisible(true);
               dispose();
           }
        });
    }//GEN-LAST:event_routineMouseClicked

    private void roomMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roomMouseClicked
        // TODO add your handling code here:
        room.addMouseListener(new MouseAdapter(){
           @Override
           public void mouseClicked(MouseEvent e)
           {
               new RoomDistribution().setVisible(true);
               dispose();
           }
        });
    }//GEN-LAST:event_roomMouseClicked

    private void payActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payActionPerformed
        // MAKE PAYMENT button code:
        
        if(roomField.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(rootPane, "Room field is empty");
        }
        else
        {
            if(roomField.getText().matches("[1-3]0[1-3][a-d]|40[1-3][a-c]|50[1-3][ab]|[6-7]0[1-3]a"))
            {
                if(codeField.getText().isEmpty())
                {
                    if(!amtPaid.getText().isEmpty())
                    {
                        int paid=Integer.parseInt(amtPaid.getText());   //Paid by student
                        String roomNo[]=roomField.getText().split("");
                        try{
                            String qry="SELECT * FROM resident WHERE floorNo='"+roomNo[0]+"' AND flatNo='"+roomNo[2]+"' AND person='"+roomNo[3]+"'";
                            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                            Connection con = DriverManager.getConnection(url);

                            Statement stmt=con.createStatement();
                            ResultSet a=stmt.executeQuery(qry);
                            if(a.next())
                            {
                                int amount=a.getInt("rent");    //amount due
                                int left=amount-paid;
                                String update="UPDATE resident SET rent='"+left+"' WHERE floorNo='"+roomNo[0]+"' AND flatNo='"+roomNo[2]+"' AND person='"+roomNo[3]+"'";
                                //System.out.println("UPDATE resident SET rent='"+left+"' WHERE floorNo='"+roomNo[0]+"' AND flatNo='"+roomNo[1]+"' AND person='"+roomNo[3]+"'");
                                int num=stmt.executeUpdate(update);
                                if(num>0)
                                {
                                    int reply=JOptionPane.showConfirmDialog(rootPane, "Payment Successful. Do you want to print a receipt?", "heading", JOptionPane.YES_NO_OPTION);
                                    if(reply==JOptionPane.YES_OPTION)
                                    {
                                        BufferedWriter bw = null;
                                         String mycontent = 
                                                           "|Room no.:      |  "+roomField.getText()+"\n"
                                                         + "|Name:          |  "+nameField.getText()+"\n"
                                                         + "|Amount paid:   |  "+paid+"\n"
                                                         + "|Payment method:|  Cash/Card"+"\n"
                                                         + "|Paid on:       |  "+LocalDate.now()+"\n"
                                                         + "|Amount Due     |  "+left;
                                        System.out.println(mycontent);
                                        try
                                        {
                                         //Specify the file name and path here
                                            File file = new File("D:/bill.doc");

                                         /* This logic will make sure that the file 
                                          * gets created if it is not present at the
                                          * specified location*/
                                            if (!file.exists()) {
                                               file.createNewFile();
                                            }

                                            FileWriter fw = new FileWriter(file);
                                            bw = new BufferedWriter(fw);
                                            bw.write(mycontent);
                                            JOptionPane.showMessageDialog(pagePanel, "The bill is written successfully to D:\bill.doc");
                                        }
                                        catch (IOException e)
                                        {
                                            System.err.println("Error: " + e.getMessage());
                                        }
                                        finally
                                        { 
                                           try{
                                              if(bw!=null)
                                                 bw.close();
                                           }catch(Exception ex){
                                               System.out.println("Error in closing the BufferedWriter"+ex);
                                            }
                                        }
                                    }     
                                    roomField.setText("");
                                    nameField.setText("");
                                    amtDue.setText("");
                                    amtPaid.setText("");
                                    new RentPayment().setVisible(true);
                                    dispose();
                                }
                                else
                                {
                                    JOptionPane.showMessageDialog(rootPane, "Some error occurred");
                                }
                            }
                            else
                            {
                                JOptionPane.showMessageDialog(rootPane, "No records found");
                            }
                        }
                        catch(Exception e)
                        {
                            e.printStackTrace();
                        }
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(pagePanel, "Amount paid or Discount code field required");
                    }
                }
                else
                {
                    String roomNo[]=roomField.getText().split("");
                    try
                    {
                        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                        Connection con = DriverManager.getConnection(url);
                        Statement stmt=con.createStatement();
                        String w="SELECT * FROM discountCode";
                        
                        ResultSet rsw=stmt.executeQuery(w);
                        int exist=0;
                        String offer="";
                        while(rsw.next())
                        {
                            if(codeField.getText().equals(rsw.getString("code")))
                            {
                                exist=1;
                                offer=rsw.getString("offer");
                            }
                        }
                        
                        if(exist==1)
                        {
                            int amount=0, calc=0;
                            if(offer.contains("%"))
                            {
                                amount=Integer.parseInt(amtDue.getText());
                                String per[]=offer.split("%");
                                int out=100-Integer.parseInt(per[0]);
                                
                                calc=(amount*out)/100;
                                int paid=amount-calc;
                                //System.out.println(calc);
                                /////////////////////
                                String q="SELECT * FROM resident WHERE floorNo='"+roomNo[0]+"' AND flatNo='"+roomNo[2]+"' AND person='"+roomNo[3]+"'";
                                
                                ResultSet abc=stmt.executeQuery(q);
                                if(abc.next())
                                {
                                    String update="UPDATE resident SET rent='"+calc+"' WHERE floorNo='"+roomNo[0]+"' AND flatNo='"+roomNo[2]+"' AND person='"+roomNo[3]+"'";
                                    //System.out.println("UPDATE resident SET rent='"+left+"' WHERE floorNo='"+roomNo[0]+"' AND flatNo='"+roomNo[1]+"' AND person='"+roomNo[3]+"'");
                                    int num=stmt.executeUpdate(update);
                                    if(num>0)
                                    {
                                        int reply=JOptionPane.showConfirmDialog(rootPane, "Payment Successful. Do you want to print a receipt?", "heading", JOptionPane.YES_NO_OPTION);
                                        if(reply==JOptionPane.YES_OPTION)
                                        {
                                            BufferedWriter bw = null;
                                             String mycontent = 
                                                               "|Room no.:      |  "+roomField.getText()+"\n"
                                                             + "|Name:          |  "+nameField.getText()+"\n"
                                                             + "|Amount paid:   |  "+paid+"\n"
                                                             + "|Payment method:|  Promo Code"+"\n"
                                                             + "|Paid on:       |  "+LocalDate.now()+"\n"
                                                             + "|Amount Due     |  "+calc;
                                            System.out.println(mycontent);
                                            try
                                            {
                                             //Specify the file name and path here
                                                File file = new File("D:/bill.doc");

                                             /* This logic will make sure that the file 
                                              * gets created if it is not present at the
                                              * specified location*/
                                                if (!file.exists()) {
                                                   file.createNewFile();
                                                }

                                                FileWriter fw = new FileWriter(file);
                                                bw = new BufferedWriter(fw);
                                                bw.write(mycontent);
                                                JOptionPane.showMessageDialog(pagePanel, "The bill is written successfully to D:\bill.doc");
                                            }
                                            catch (IOException e)
                                            {
                                                System.err.println("Error: " + e.getMessage());
                                            }
                                            finally
                                            { 
                                               try{
                                                  if(bw!=null)
                                                     bw.close();
                                               }catch(Exception ex){
                                                   System.out.println("Error in closing the BufferedWriter"+ex);
                                                }
                                            }
                                        }     
                                        roomField.setText("");
                                        nameField.setText("");
                                        amtDue.setText("");
                                        amtPaid.setText("");
                                        new RentPayment().setVisible(true);
                                        dispose();
                                    }
                                    else
                                    {
                                        JOptionPane.showMessageDialog(rootPane, "Some error occurred");
                                    }
                                }
                                else
                                {
                                    JOptionPane.showMessageDialog(rootPane, "No records found");
                                }
                            }
                            else if(offer.contains("-"))
                            {
                                amount=Integer.parseInt(amtDue.getText());
                                calc=amount+Integer.parseInt(offer);
                                int paid=amount-calc;
                                //System.out.println(calc);
                                /////////////////////
                                String q="SELECT * FROM resident WHERE floorNo='"+roomNo[0]+"' AND flatNo='"+roomNo[2]+"' AND person='"+roomNo[3]+"'";
                                
                                ResultSet abc=stmt.executeQuery(q);
                                if(abc.next())
                                {
                                    String update="UPDATE resident SET rent='"+calc+"' WHERE floorNo='"+roomNo[0]+"' AND flatNo='"+roomNo[2]+"' AND person='"+roomNo[3]+"'";
                                    
                                    int num=stmt.executeUpdate(update);
                                    if(num>0)
                                    {
                                        int reply=JOptionPane.showConfirmDialog(rootPane, "Payment Successful. Do you want to print a receipt?", "heading", JOptionPane.YES_NO_OPTION);
                                        if(reply==JOptionPane.YES_OPTION)
                                        {
                                            BufferedWriter bw = null;
                                             String mycontent = 
                                                               "|Room no.:      |  "+roomField.getText()+"\n"
                                                             + "|Name:          |  "+nameField.getText()+"\n"
                                                             + "|Amount paid:   |  "+paid+"\n"
                                                             + "|Payment method:|  Promo Code"+"\n"
                                                             + "|Paid on:       |  "+LocalDate.now()+"\n"
                                                             + "|Amount Due     |  "+calc;
                                            System.out.println(mycontent);
                                            try
                                            {
                                             //Specify the file name and path here
                                                File file = new File("D:/bill.doc");

                                             /* This logic will make sure that the file 
                                              * gets created if it is not present at the
                                              * specified location*/
                                                if (!file.exists()) {
                                                   file.createNewFile();
                                                }

                                                FileWriter fw = new FileWriter(file);
                                                bw = new BufferedWriter(fw);
                                                bw.write(mycontent);
                                                JOptionPane.showMessageDialog(pagePanel, "The bill is written successfully to D:\bill.doc");
                                            }
                                            catch (IOException e)
                                            {
                                                System.err.println("Error: " + e.getMessage());
                                            }
                                            finally
                                            { 
                                               try
                                               {
                                                  if(bw!=null)
                                                     bw.close();
                                               }
                                               catch(Exception ex)
                                               {
                                                   System.out.println("Error in closing the BufferedWriter"+ex);
                                               }
                                            }
                                        }     
                                        roomField.setText("");
                                        nameField.setText("");
                                        amtDue.setText("");
                                        amtPaid.setText("");
                                        new RentPayment().setVisible(true);
                                        dispose();
                                    }
                                    else
                                    {
                                        JOptionPane.showMessageDialog(rootPane, "Some error occurred");
                                    }
                                }
                                else
                                {
                                    JOptionPane.showMessageDialog(rootPane, "No records found");
                                }
                            }
                            else
                            {
                                JOptionPane.showMessageDialog(pagePanel, "Cannot Read Offer");
                            }
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(pagePanel, "Invalid Promo Code!");
                        }
                    }   
                    catch(Exception e)
                    {
                        e.printStackTrace();
                    }
                }
            }
            else
            {
                JOptionPane.showMessageDialog(pagePanel, "Invalid room no.");
            }
        }
    }//GEN-LAST:event_payActionPerformed

    private void kitchenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_kitchenMouseClicked
        // TODO add your handling code here:
        new KitchenMaterials().setVisible(true);
        dispose();
    }//GEN-LAST:event_kitchenMouseClicked

    private void dashboardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dashboardMouseClicked
        // TODO add your handling code here:
        new Dashboard().setVisible(true);
        dispose();
    }//GEN-LAST:event_dashboardMouseClicked

    private void billMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_billMouseClicked
        // TODO add your handling code here:
        new BillPayment().setVisible(true);
        dispose();
    }//GEN-LAST:event_billMouseClicked

    private void roomFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_roomFieldKeyReleased
        // TODO add your handling code here:
        String room[]=roomField.getText().split("");
        if(roomField.getText().matches("[1-3]0[1-3][a-d]|40[1-3][a-c]|50[1-3][ab]|[6-7]0[1-3]a"))
        {
            String search="SELECT * FROM resident WHERE floorNo='"+room[0]+"' AND flatNo='"+room[2]+"' AND person='"+room[3]+"' AND houseStatus='1'";
            try
            {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection con = DriverManager.getConnection(url);
                
                Statement stmt=con.createStatement();
                ResultSet a=stmt.executeQuery(search);
                
                if(a.next())
                {
                    String name=a.getString("name");
                    int due=a.getInt("rent");
                    nameField.setText(name);
                    amtDue.setText(Integer.toString(due));
                    ////
                    if(a.getString("rentDate")==null)
                    {
                        dueDate.setText(a.getDate("joinFrom").toString());
                    }
                    else
                    {
                        dueDate.setText(a.getDate("rentDate").toString());
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(rootPane, "No records available");
                    nameField.setText("");
                    amtDue.setText("");
                    dueDate.setText("");
                }
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
        }
        else
        {
            if(roomField.getText().length()>=4)
            {
                JOptionPane.showMessageDialog(rootPane, "Invaid room no.");
                nameField.setText("");
                amtDue.setText("");
                dueDate.setText("");
            }
        }
    }//GEN-LAST:event_roomFieldKeyReleased

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        ImageIcon icon=new ImageIcon("images/login.png");
        Image img=icon.getImage();
        Image newimg=img.getScaledInstance(24, 22, java.awt.Image.SCALE_SMOOTH);
        ImageIcon finale=new ImageIcon(newimg);
        profile.setIcon(finale);
        
        String maxRent="select top 1 * from resident order by rent desc";
        try
            {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection con = DriverManager.getConnection(url);
                
                Statement stmt=con.createStatement();
                ResultSet a=stmt.executeQuery(maxRent);
                
                if(a.next())
                {
                    String name=a.getString("name");
                    int due=a.getInt("rent");
                    int floor=a.getInt("floorNo");
                    int flat=a.getInt("flatNo");
                    String per=a.getString("person");
                    String room=floor+"0"+flat+per;
                    
                    roomField.setText(room);
                    nameField.setText(name);
                    amtDue.setText(Integer.toString(due));
                    amtPaid.requestFocus();
                    if(a.getString("rentDate")==null)
                    {
                        dueDate.setText(a.getDate("joinFrom").toString());
                    }
                    else
                    {
                        dueDate.setText(a.getDate("rentDate").toString());
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(pagePanel, "No rent due!");
                }
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
    }//GEN-LAST:event_formComponentShown

    private void rightBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightBtnActionPerformed
        // TODO add your handling code here:
        if(!roomField.getText().isEmpty())
        {
            String split[]=roomField.getText().split("");
            //String q="SELECT * FROM resident WHERE floorNo='"+split[0]+"' AND flatNo='"+split[2]+"' AND person='"+split[3]+"' AND rent>0";
            String order="select * from resident where rent>0 order by floorNo, flatNo, person";
            try
            {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection con = DriverManager.getConnection(url);
                
                Statement stmt=con.createStatement(
                        ResultSet.TYPE_SCROLL_INSENSITIVE, 
                        ResultSet.CONCUR_READ_ONLY);
                ResultSet b=stmt.executeQuery(order);
                
                while(b.next())
                {
                    if(b.getInt("floorNo")==Integer.parseInt(split[0]) && b.getInt("flatNo")==Integer.parseInt(split[2]) && b.getString("person").equals(split[3]))
                    {
                        if(b.next())
                        {
                            String name=b.getString("name");
                            int due=b.getInt("rent");
                            int floor=b.getInt("floorNo");
                            int flat=b.getInt("flatNo");
                            String per=b.getString("person");
                            String room=floor+"0"+flat+per; 
                            
                            roomField.setText(room);
                            nameField.setText(name);
                            amtDue.setText(Integer.toString(due));
                            if(b.getString("rentDate")==null)
                            {
                                dueDate.setText(b.getDate("joinFrom").toString());
                            }
                            else
                            {
                                dueDate.setText(b.getDate("rentDate").toString());
                            }
                            
                            if(b.previous())
                            {
                                leftBtn.setEnabled(true);
                            }
                        }
                        else
                        {
                            rightBtn.setEnabled(false);
                            roomField.requestFocus();
                        }
                    }
                }
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_rightBtnActionPerformed

    private void leftBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftBtnActionPerformed
        // TODO add your handling code here:
        if(!roomField.getText().isEmpty())
        {
            String split[]=roomField.getText().split("");
            //String q="SELECT * FROM resident WHERE floorNo='"+split[0]+"' AND flatNo='"+split[2]+"' AND person='"+split[3]+"' AND rent>0";
            String order="select * from resident where rent>0 order by floorNo, flatNo, person";
            try
            {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection con = DriverManager.getConnection(url);
                
                Statement stmt=con.createStatement(
                        ResultSet.TYPE_SCROLL_INSENSITIVE, 
                        ResultSet.CONCUR_READ_ONLY);
                ResultSet b=stmt.executeQuery(order);
                
                b.last();
                if(b.getInt("floorNo")==Integer.parseInt(split[0]) && b.getInt("flatNo")==Integer.parseInt(split[2]) && b.getString("person").equals(split[3]))
                {
                    if(b.previous())
                    {
                        String name=b.getString("name");
                        int due=b.getInt("rent");
                        int floor=b.getInt("floorNo");
                        int flat=b.getInt("flatNo");
                        String per=b.getString("person");
                        String room=floor+"0"+flat+per; 

                        roomField.setText(room);
                        nameField.setText(name);
                        amtDue.setText(Integer.toString(due));
                        if(b.getString("rentDate")==null)
                        {
                            dueDate.setText(b.getDate("joinFrom").toString());
                        }
                        else
                        {
                            dueDate.setText(b.getDate("rentDate").toString());
                        }
                        
                        if(b.next())
                        {
                            rightBtn.setEnabled(true);
                        }
                    }
                    else
                    {
                        leftBtn.setEnabled(false);
                    }
                }
                else
                {
                    while(b.previous())
                    {
                        if(b.getInt("floorNo")==Integer.parseInt(split[0]) && b.getInt("flatNo")==Integer.parseInt(split[2]) && b.getString("person").equals(split[3]))
                        {
                            if(b.previous())
                            {
                                String name=b.getString("name");
                                int due=b.getInt("rent");
                                int floor=b.getInt("floorNo");
                                int flat=b.getInt("flatNo");
                                String per=b.getString("person");
                                String room=floor+"0"+flat+per; 

                                roomField.setText(room);
                                nameField.setText(name);
                                amtDue.setText(Integer.toString(due));
                                if(b.getString("rentDate")==null)
                                {
                                    dueDate.setText(b.getDate("joinFrom").toString());
                                }
                                else
                                {
                                    dueDate.setText(b.getDate("rentDate").toString());
                                }
                                
                                if(b.next())
                                {
                                    rightBtn.setEnabled(true);
                                }
                            }
                            else
                            {
                                leftBtn.setEnabled(false);
                            }
                        }
                    }
                }
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_leftBtnActionPerformed

    private void amtPaidKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_amtPaidKeyReleased
        // TODO add your handling code here:
        if(amtPaid.getText().isEmpty())
        {
            codeField.setText("");
            codeField.setEnabled(true);
        }
        else
        {
            codeField.setEnabled(false);
        }
    }//GEN-LAST:event_amtPaidKeyReleased

    private void amtPaidKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_amtPaidKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_amtPaidKeyPressed

    private void codeFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codeFieldKeyReleased
        // TODO add your handling code here:
        if(codeField.getText().isEmpty())
        {
            amtPaid.setText("");
            amtPaid.setEnabled(true);
        }
        else
        {
            amtPaid.setEnabled(false);
        }
    }//GEN-LAST:event_codeFieldKeyReleased

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowActivated

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        try
        {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection(url);
            Statement stmt=con.createStatement();
            
            //////Update monthly revenue & expense
         /*   int cur_m=LocalDate.now().getMonthValue();
            int cur_y=LocalDate.now().getYear();
            int exists;
            String check="SELECT * FROM profLoss WHERE months='"+cur_m+"' AND years='"+cur_y+"'";
            ResultSet r_check=stmt.executeQuery(check);
            if(r_check.next())
            { 
                exists=1;
            }
            else
            {
                exists=0;
            }
            
            ////////////....................................................///////////////////////
            String fDate="01";
            String month=Integer.toString(LocalDate.now().getMonthValue());
            int year=LocalDate.now().getYear();
            
        //Max date in a month    
            YearMonth yearMonthObject = YearMonth.of(year, LocalDate.now().getMonthValue());
            int daysInMonth = yearMonthObject.lengthOfMonth();
            int lDate=daysInMonth;
        
            if(month.length()==1)
            {
                month="0"+month;
            }
            
            String start=year+"-"+month+"-"+fDate;
            String last=year+"-"+month+"-"+lDate;
            LocalDate lStart=LocalDate.parse(start);
            LocalDate lLast=LocalDate.parse(last);
            
            int sum=0;
            String otp="SELECT * FROM resident WHERE houseStatus='1'";
            ResultSet rop=stmt.executeQuery(otp);
            while(rop.next())
            {
             //check if revenue only for people joined in or before the month
                LocalDate din=rop.getDate("joinFrom").toLocalDate();
                if(din.isBefore(lLast) || din.isEqual(lLast))
                {
                    //System.out.println(din);
                    int food=0;
                    if(rop.getString("food").equals("veg"))
                    {   food=2000;  sum+=food;  }
                    else if(rop.getString("food").equals("nonveg"))
                    {   food=3500;  sum+=food;  }
                    else
                    {   food=0;     sum+=food;  }
                    
                    if(rop.getInt("floorNo")<4)
                    {   sum+=15000; }
                    else if(rop.getInt("floorNo")==4)
                    {   sum+=20000; }
                    else if(rop.getInt("floorNo")==5)
                    {   sum+=32000; }
                    else if(rop.getInt("floorNo")>5)
                    {   sum+=64000; }
                }
            }
            //System.out.println("Revenue: "+sum);    //revenue in current month includes everyone joined this month and before
            
            String exp="SELECT sum(price) as monthExp FROM inventory WHERE month(buyDate)='"+month+"'";
            int tot=0;
            ResultSet rexp=stmt.executeQuery(exp);
            if(rexp.next())
            {   tot=rexp.getInt("monthExp");    }
            //System.out.println("Expense: "+tot);
            ////////////////////............................................................///////////////////////
            
            if(exists==0)
            {// doesn't exist-> insert
                //JOptionPane.showMessageDialog(pagePanel, "not exists");
                String qry="INSERT INTO profLoss(months, years, revenue, expense) VALUES('"+cur_m+"','"+cur_y+"','"+sum+"','"+tot+"')";
                int a=stmt.executeUpdate(qry);
                if(a==1)
                {
                    //System.out.println("Insert successful");
                }
                else
                {
                    //System.out.println("Insert not successful");
                }
            }
            else
            {// exists-> update
                //JOptionPane.showMessageDialog(pagePanel, "exists");
                String qry="UPDATE profLoss SET revenue='"+sum+"', expense='"+tot+"' WHERE months='"+cur_m+"' AND years='"+cur_y+"'";
                //System.out.println(qry);
                int a=stmt.executeUpdate(qry);
                if(a==1)
                {
                    //System.out.println("Update successful");
                }
                else
                {
                    //System.out.println("Update not successful");
                }
            }   */
            //////Update monthly revenue & expense
            int cur_m=LocalDate.now().getMonthValue();
            int cur_y=LocalDate.now().getYear();
            int exists;
            String check="SELECT * FROM profLoss WHERE months='"+cur_m+"' AND years='"+cur_y+"'";
            ResultSet r_check=stmt.executeQuery(check);
            if(r_check.next())
            { 
                exists=1;
            }
            else
            {
                exists=0;
            }
            
            ////////////....................................................///////////////////////
            String fDate="01";
            String month=Integer.toString(LocalDate.now().getMonthValue());
            int year=LocalDate.now().getYear();
            
        //Max date in a month    
            YearMonth yearMonthObject = YearMonth.of(year, LocalDate.now().getMonthValue());
            int daysInMonth = yearMonthObject.lengthOfMonth();
            int lDate=daysInMonth;
        
            if(month.length()==1)
            {
                month="0"+month;
            }
            
            String start=year+"-"+month+"-"+fDate;
            String last=year+"-"+month+"-"+lDate;
            LocalDate lStart=LocalDate.parse(start);
            LocalDate lLast=LocalDate.parse(last);
            
            int veg=0, nonveg=0;
                        String v="Select foodCost AS f from feeDetails where opt='veg'";
                        ResultSet rv=stmt.executeQuery(v);
                        if(rv.next())
                        {
                            veg=rv.getInt("f");
                        }
                        
                        String nv="Select foodCost AS f from feeDetails where opt='nonveg'";
                        ResultSet rnv=stmt.executeQuery(nv);
                        if(rnv.next())
                        {
                            nonveg=rnv.getInt("f");
                        }
                        
            int std4=0, std3=0, pre2=0, pre1=0;
                        String rent4="Select roomRent AS r from feeDetails where opt='Standard-4'";
                        ResultSet rs4=stmt.executeQuery(rent4);
                        if(rs4.next())
                        {
                            std4=rs4.getInt("r");
                        }
                        
                        String rent3="Select roomRent AS r from feeDetails where opt='Standard-3'";
                        ResultSet rs3=stmt.executeQuery(rent3);
                        if(rs3.next())
                        {
                            std3=rs3.getInt("r");
                        }
                        
                        String rent2="Select roomRent AS r from feeDetails where opt='Premium-2'";
                        ResultSet rs2=stmt.executeQuery(rent2);
                        if(rs2.next())
                        {
                            pre2=rs2.getInt("r");
                        }
                        
                        String rent1="Select roomRent AS r from feeDetails where opt='Premium-1'";
                        ResultSet rs1=stmt.executeQuery(rent1);
                        if(rs1.next())
                        {
                            pre1=rs1.getInt("r");
                        }
            int sum=0;
            String otp="SELECT * FROM resident WHERE houseStatus='1'";
            ResultSet rop=stmt.executeQuery(otp);
            while(rop.next())
            {
             //check if revenue only for people joined in or before the month
                LocalDate din=rop.getDate("joinFrom").toLocalDate();
                if(din.isBefore(lLast) || din.isEqual(lLast))
                {
                    //System.out.println(din);
                    if(rop.getString("food").equals("veg"))
                    {   //food=2000;  sum+=food;  
                        sum+=veg;
                    }
                    else if(rop.getString("food").equals("nonveg"))
                    {   //food=3500;  sum+=food;  
                        sum+=nonveg;
                    }
                    else
                    {   sum+=0;  }
                    
                    //////////
                    if(rop.getInt("floorNo")<4)
                    {  
                        sum+=std4;
                    }
                    else if(rop.getInt("floorNo")==4)
                    {
                        sum+=std3;
                    }
                    else if(rop.getInt("floorNo")==5)
                    {
                        sum+=pre2;
                    }
                    else if(rop.getInt("floorNo")>5)
                    {
                        sum+=pre1;
                    }
                }
            }
            //System.out.println("Revenue: "+sum);    //revenue in current month includes everyone joined this month and before
            
            String exp="SELECT sum(price) as monthExp FROM inventory WHERE month(buyDate)='"+month+"'";
            int tot=0;
            ResultSet rexp=stmt.executeQuery(exp);
            if(rexp.next())
            {   tot=rexp.getInt("monthExp");    }
            
            ////////////////////............................................................///////////////////////
            if(exists==0)
            {// doesn't exist-> insert
                //JOptionPane.showMessageDialog(pagePanel, "not exists");
                String qry="INSERT INTO profLoss(months, years, revenue, expense) VALUES('"+cur_m+"','"+cur_y+"','"+sum+"','"+tot+"')";
                int a=stmt.executeUpdate(qry);
                if(a==1)
                {
                    //System.out.println("Insert successful");
                }
                else
                {
                    //System.out.println("Insert not successful");
                }
            }
            else
            {// exists-> update
                //JOptionPane.showMessageDialog(pagePanel, "exists");
                String qry="UPDATE profLoss SET revenue='"+sum+"', expense='"+tot+"' WHERE months='"+cur_m+"' AND years='"+cur_y+"'";
                //System.out.println(qry);
                int a=stmt.executeUpdate(qry);
                if(a==1)
                {
                    //System.out.println("Update successful");
                }
                else
                {
                    //System.out.println("Update not successful");
                }
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_formWindowClosed

    private void bill1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bill1MouseClicked
        // TODO add your handling code here:
        new Reports().setVisible(true);
        dispose();
    }//GEN-LAST:event_bill1MouseClicked

    private void profileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_profileMouseClicked
        // TODO add your handling code here:
        new LoginPage().setVisible(true);
        dispose();
    }//GEN-LAST:event_profileMouseClicked

    private void feeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_feeMouseClicked
        // TODO add your handling code here:
        new Fees().setVisible(true);
        dispose();
    }//GEN-LAST:event_feeMouseClicked

    private void staffMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_staffMouseClicked
        // TODO add your handling code here:
        new Staff().setVisible(true);
        dispose();
    }//GEN-LAST:event_staffMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RentPayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RentPayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RentPayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RentPayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RentPayment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField amtDue;
    private javax.swing.JTextField amtPaid;
    private javax.swing.JLabel bill;
    private javax.swing.JLabel bill1;
    private javax.swing.JTextField codeField;
    private javax.swing.JLabel dashboard;
    private javax.swing.JLabel dueDate;
    private javax.swing.JLabel fee;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel kitchen;
    private javax.swing.JButton leftBtn;
    private javax.swing.JTextField nameField;
    private javax.swing.JPanel pagePanel;
    private javax.swing.JButton pay;
    private javax.swing.JLabel profile;
    private javax.swing.JLabel rent;
    private javax.swing.JButton rightBtn;
    private javax.swing.JLabel room;
    private javax.swing.JTextField roomField;
    private javax.swing.JLabel routine;
    private javax.swing.JLabel staff;
    // End of variables declaration//GEN-END:variables
}
