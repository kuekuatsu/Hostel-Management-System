
import java.awt.GraphicsEnvironment;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.YearMonth;
import static java.time.temporal.ChronoUnit.DAYS;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Ridisha Shetty
 */
public class LoginPage extends javax.swing.JFrame {
    
    /**
     * Creates new form LoginPage
     */
    public LoginPage() {
        initComponents();
        Point center = GraphicsEnvironment.getLocalGraphicsEnvironment().getCenterPoint();
        int windowWidth = this.getWidth();
        int windowHeight = this.getHeight();
        this.setBounds(center.x - windowWidth / 2, center.y - windowHeight / 2, windowWidth,
            windowHeight);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    String url = "jdbc:sqlserver://192.168.0.98;databaseName=hostel;integratedSecurity=true";
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pagePanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        rememberBox = new javax.swing.JCheckBox();
        reset = new javax.swing.JButton();
        passwordField = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();
        usernameField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        login = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("LOGIN");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                formComponentHidden(evt);
            }
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        pagePanel.setBackground(new java.awt.Color(238, 255, 237));
        pagePanel.setPreferredSize(new java.awt.Dimension(472, 390));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 102, 0), null, null, new java.awt.Color(0, 102, 0)));
        jPanel1.setForeground(new java.awt.Color(0, 204, 0));

        jLabel1.setText("Username:");

        rememberBox.setBackground(new java.awt.Color(255, 255, 255));
        rememberBox.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rememberBox.setText(" Remember Username for logging in again");
        rememberBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rememberBoxActionPerformed(evt);
            }
        });

        reset.setBackground(new java.awt.Color(255, 255, 255));
        reset.setForeground(new java.awt.Color(0, 102, 0));
        reset.setText("Reset");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        jLabel2.setText("Password:");

        usernameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameFieldActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(0, 102, 0));
        jPanel2.setForeground(new java.awt.Color(0, 153, 0));

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Yu Gothic Light", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("LOGIN");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addComponent(jLabel6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addContainerGap())
        );

        login.setBackground(new java.awt.Color(255, 255, 255));
        login.setForeground(new java.awt.Color(0, 102, 0));
        login.setText("Login");
        login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(login)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reset)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rememberBox)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(26, 26, 26))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(rememberBox, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reset)
                    .addComponent(login))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel4.setFont(new java.awt.Font("Yu Gothic", 0, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 102, 0));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Hostel Management System");

        jLabel5.setFont(new java.awt.Font("Yu Gothic", 0, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 102, 0));
        jLabel5.setText("Shivdham");

        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setText("If you forget your password, you will have to reset it by contacting the administrator");

        javax.swing.GroupLayout pagePanelLayout = new javax.swing.GroupLayout(pagePanel);
        pagePanel.setLayout(pagePanelLayout);
        pagePanelLayout.setHorizontalGroup(
            pagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pagePanelLayout.createSequentialGroup()
                .addGap(111, 111, 111)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pagePanelLayout.createSequentialGroup()
                .addGap(0, 48, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addContainerGap(39, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pagePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pagePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pagePanelLayout.setVerticalGroup(
            pagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rememberBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rememberBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rememberBoxActionPerformed

    private void usernameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameFieldActionPerformed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        // Reset Button
        usernameField.setText("");
        passwordField.setText("");
    }//GEN-LAST:event_resetActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        try
        {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection(url);
            Statement stmt=con.createStatement();
            int i=0; String name="";
            
            String look="SELECT * FROM manager";
            ResultSet res=stmt.executeQuery(look);
            while(res.next())
            {
                i=res.getInt("remember");
                name=res.getString("username");
            }
            if(i==1)
            {
                passwordField.requestFocus();
                rememberBox.doClick();
                usernameField.setText(name);
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_formComponentShown

    private void formComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_formComponentHidden

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        //WRITE THE MONTHLY RENT UPDATE CODE HERE
        try
        {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection(url);
            Statement stmt=con.createStatement();
            String sql="SELECT * FROM resident WHERE joinFrom IS NOT NULL";
            String sql2="SELECT * FROM resident WHERE joinFrom IS NOT NULL";
            
            int l=0;
            
            ArrayList no=new ArrayList();
            ArrayList floor=new ArrayList();
            ArrayList flat=new ArrayList();
            ArrayList person=new ArrayList();
            ArrayList foodChoice=new ArrayList();
            
            ArrayList<LocalDate> lastPaid=new ArrayList();
            LocalDate today=LocalDate.now();
            
            ResultSet p=stmt.executeQuery(sql2);
            while(p.next())
            {
                l++;
            }
            
            ResultSet op=stmt.executeQuery(sql);
            while(op.next())
            {
                no.add(op.getInt("srNo"));
                floor.add(op.getInt("floorNo"));
                flat.add(op.getInt("flatNo"));
                person.add(op.getString("person"));
                foodChoice.add(op.getString("food"));
                
                if(op.getString("rentDate")!=null)
                {
                    //rentDate is not null i.e. the resident has been living for over a month ... compare with rentDate column
                    lastPaid.add(op.getDate("rentDate").toLocalDate());
                }
                else
                {
                    //rentDate is null i.e the resident hasn't completed the 1st month in the room yet ... compare with joinFrom column
                    lastPaid.add(op.getDate("joinFrom").toLocalDate());
                }
            }
            
                ArrayList<Integer> thy=new ArrayList();
                ArrayList<Long> diff=new ArrayList();
                ArrayList<Integer> add=new ArrayList();
            for(int z=0;z<l;z++)
            {
                diff.add(DAYS.between(lastPaid.get(z), today));
                if(foodChoice.get(z).equals("veg"))
                {
                    //add.add(2000);
                    String foo="Select foodCost AS f from feeDetails where opt='veg'";
                    ResultSet rf=stmt.executeQuery(foo);
                    if(rf.next())
                    {
                        add.add(rf.getInt("f"));
                    }
                }
                else if(foodChoice.get(z).equals("nonveg"))
                {
                    String foo="Select foodCost AS f from feeDetails where opt='nonveg'";
                    ResultSet rf=stmt.executeQuery(foo);
                    if(rf.next())
                    {
                        add.add(rf.getInt("f"));
                    }
                }
                else
                {
                    add.add(0);
                }
            }
            ArrayList<Integer> rentRoom=new ArrayList();
            for(int at=0;at<l;at++)
            {
                String roomField=floor.get(at)+"0"+flat.get(at)+person.get(at);
                
                if(roomField.matches("[1-3]0[1-3][a-d]"))
                {
                    //rentRoom.add(15000);
                    String rent="Select roomRent AS r from feeDetails where opt='Standard-4'";
                    ResultSet rs=stmt.executeQuery(rent);
                    if(rs.next())
                    {
                        rentRoom.add(rs.getInt("r"));
                    }
                }
                else if(roomField.matches("40[1-3][a-c]")) 
                {
                    //rentRoom.add(20000);
                    String rent="Select roomRent AS r from feeDetails where opt='Standard-3'";
                    ResultSet rs=stmt.executeQuery(rent);
                    if(rs.next())
                    {
                        rentRoom.add(rs.getInt("r"));
                    }
                }
                else if(roomField.matches("50[1-3][ab]"))
                {
                 //   rentRoom.add(32000);
                    String rent="Select roomRent AS r from feeDetails where opt='Premium-2'";
                    ResultSet rs=stmt.executeQuery(rent);
                    if(rs.next())
                    {
                        rentRoom.add(rs.getInt("r"));
                    }
                }
                else if(roomField.matches("[6-7]0[1-3]a"))
                {
                    //rentRoom.add(64000);
                    String rent="Select roomRent AS r from feeDetails where opt='Premium-1'";
                    ResultSet rs=stmt.executeQuery(rent);
                    if(rs.next())
                    {
                        rentRoom.add(rs.getInt("r"));
                    }
                }
            }
            for(int j=0;j<l;j++)
            {
                //int stdFour=15000; 
                int due=rentRoom.get(j)+add.get(j);
                if(diff.get(j)>=30)
                {
                    String up="UPDATE resident SET rentDate='"+today+"',rent=rent+"+due+" WHERE srNo='"+no.get(j)+"'";
                    stmt.executeUpdate(up);
                }
            }
            
            //////Update monthly revenue & expense
            int cur_m=LocalDate.now().getMonthValue();
            int cur_y=LocalDate.now().getYear();
            int exists;
            String check="SELECT * FROM profLoss WHERE months='"+cur_m+"' AND years='"+cur_y+"'";
            ResultSet r_check=stmt.executeQuery(check);
            if(r_check.next())
            { 
                exists=1;
            }
            else
            {
                exists=0;
            }
            
            ////////////....................................................///////////////////////
            String fDate="01";
            String month=Integer.toString(LocalDate.now().getMonthValue());
            int year=LocalDate.now().getYear();
            
        //Max date in a month    
            YearMonth yearMonthObject = YearMonth.of(year, LocalDate.now().getMonthValue());
            int daysInMonth = yearMonthObject.lengthOfMonth();
            int lDate=daysInMonth;
        
            if(month.length()==1)
            {
                month="0"+month;
            }
            
            String start=year+"-"+month+"-"+fDate;
            String last=year+"-"+month+"-"+lDate;
            LocalDate lStart=LocalDate.parse(start);
            LocalDate lLast=LocalDate.parse(last);
            
            int veg=0, nonveg=0;
                        String v="Select foodCost AS f from feeDetails where opt='veg'";
                        ResultSet rv=stmt.executeQuery(v);
                        if(rv.next())
                        {
                            veg=rv.getInt("f");
                        }
                        
                        String nv="Select foodCost AS f from feeDetails where opt='nonveg'";
                        ResultSet rnv=stmt.executeQuery(nv);
                        if(rnv.next())
                        {
                            nonveg=rnv.getInt("f");
                        }
                        
            int std4=0, std3=0, pre2=0, pre1=0;
                        String rent4="Select roomRent AS r from feeDetails where opt='Standard-4'";
                        ResultSet rs4=stmt.executeQuery(rent4);
                        if(rs4.next())
                        {
                            std4=rs4.getInt("r");
                        }
                        
                        String rent3="Select roomRent AS r from feeDetails where opt='Standard-3'";
                        ResultSet rs3=stmt.executeQuery(rent3);
                        if(rs3.next())
                        {
                            std3=rs3.getInt("r");
                        }
                        
                        String rent2="Select roomRent AS r from feeDetails where opt='Premium-2'";
                        ResultSet rs2=stmt.executeQuery(rent2);
                        if(rs2.next())
                        {
                            pre2=rs2.getInt("r");
                        }
                        
                        String rent1="Select roomRent AS r from feeDetails where opt='Premium-1'";
                        ResultSet rs1=stmt.executeQuery(rent1);
                        if(rs1.next())
                        {
                            pre1=rs1.getInt("r");
                        }
            int sum=0;
            String otp="SELECT * FROM resident WHERE houseStatus='1'";
            ResultSet rop=stmt.executeQuery(otp);
            while(rop.next())
            {
             //check if revenue only for people joined in or before the month
                LocalDate din=rop.getDate("joinFrom").toLocalDate();
                if(din.isBefore(lLast) || din.isEqual(lLast))
                {
                    //System.out.println(din);
                    if(rop.getString("food").equals("veg"))
                    {   //food=2000;  sum+=food;  
                        sum+=veg;
                    }
                    else if(rop.getString("food").equals("nonveg"))
                    {   //food=3500;  sum+=food;  
                        sum+=nonveg;
                    }
                    else
                    {   sum+=0;  }
                    
                    //////////
                    if(rop.getInt("floorNo")<4)
                    {  
                        sum+=std4;
                    }
                    else if(rop.getInt("floorNo")==4)
                    {
                        sum+=std3;
                    }
                    else if(rop.getInt("floorNo")==5)
                    {
                        sum+=pre2;
                    }
                    else if(rop.getInt("floorNo")>5)
                    {
                        sum+=pre1;
                    }
                }
            }
            //System.out.println("Revenue: "+sum);    //revenue in current month includes everyone joined this month and before
            
            String exp="SELECT sum(price) as monthExp FROM inventory WHERE month(buyDate)='"+month+"'";
            int tot=0;
            ResultSet rexp=stmt.executeQuery(exp);
            if(rexp.next())
            {   tot=rexp.getInt("monthExp");    }
            
            ////////////////////............................................................///////////////////////
            if(exists==0)
            {// doesn't exist-> insert
                //JOptionPane.showMessageDialog(pagePanel, "not exists");
                String qry="INSERT INTO profLoss(months, years, revenue, expense) VALUES('"+cur_m+"','"+cur_y+"','"+sum+"','"+tot+"')";
                int a=stmt.executeUpdate(qry);
                if(a==1)
                {
                    //System.out.println("Insert successful");
                }
                else
                {
                    //System.out.println("Insert not successful");
                }
            }
            else
            {// exists-> update
                //JOptionPane.showMessageDialog(pagePanel, "exists");
                String qry="UPDATE profLoss SET revenue='"+sum+"', expense='"+tot+"' WHERE months='"+cur_m+"' AND years='"+cur_y+"'";
                //System.out.println(qry);
                int a=stmt.executeUpdate(qry);
                if(a==1)
                {
                    //System.out.println("Update successful");
                }
                else
                {
                    //System.out.println("Update not successful");
                }
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_formWindowClosed

    private void loginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginActionPerformed
        // TODO add your handling code here:
        try
        {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection(url);
            Statement stmt=con.createStatement();
            
            String sql="SELECT * FROM manager";
            ResultSet res=stmt.executeQuery(sql);
            int k=0;
            while(res.next())
            {
                if(res.getString("username").equals(usernameField.getText()) && res.getString("pass").equals(passwordField.getText()))
                {
                    if(rememberBox.isSelected())
                    {
                        k=1;
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(pagePanel, "Invalid credentials!");
                }
            }
            String s="UPDATE manager SET remember='"+k+"' WHERE username='"+usernameField.getText()+"' AND pass='"+passwordField.getText()+"'";
            int j=stmt.executeUpdate(s);
            if(j>0)
            {
                new RoutineCheck().setVisible(true);
                dispose();
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_loginActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoginPage().setVisible(true);
            }
        });
        //JFrame aWindow = new JFrame("This is the Window Title");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton login;
    private javax.swing.JPanel pagePanel;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JCheckBox rememberBox;
    private javax.swing.JButton reset;
    private javax.swing.JTextField usernameField;
    // End of variables declaration//GEN-END:variables
}
